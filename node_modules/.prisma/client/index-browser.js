
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.7.0
 * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
 */
Prisma.prismaVersion = {
  client: "3.7.0",
  engine: "8746e055198f517658c08a0c426c7eec87f5a85f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  nim: 'nim',
  email_itb: 'email_itb',
  email_non_itb: 'email_non_itb',
  long_name: 'long_name',
  short_name: 'short_name',
  fakultas: 'fakultas',
  role: 'role'
});

exports.Prisma.CandidateScalarFieldEnum = makeEnum({
  id: 'id',
  account_id: 'account_id'
});

exports.Prisma.ChallengeScalarFieldEnum = makeEnum({
  id: 'id',
  sender_id: 'sender_id',
  candidate_id: 'candidate_id',
  payload: 'payload',
  progress: 'progress',
  created_at: 'created_at'
});

exports.Prisma.ChallengeAnswerScalarFieldEnum = makeEnum({
  id: 'id',
  challenge_id: 'challenge_id',
  answer: 'answer',
  created_at: 'created_at'
});

exports.Prisma.PelanggaranScalarFieldEnum = makeEnum({
  id: 'id',
  sender_id: 'sender_id',
  candidate_id: 'candidate_id',
  keterangan: 'keterangan',
  bukti_url: 'bukti_url',
  created_at: 'created_at'
});

exports.Prisma.VoteScalarFieldEnum = makeEnum({
  id: 'id',
  voter_id: 'voter_id',
  candidate_id: 'candidate_id',
  created_at: 'created_at'
});

exports.Prisma.BerkasCandidateScalarFieldEnum = makeEnum({
  id: 'id',
  nim: 'nim',
  password: 'password',
  progress: 'progress'
});

exports.Prisma.BerkasUploadedScalarFieldEnum = makeEnum({
  id: 'id',
  berkas_id: 'berkas_id',
  berkas_candidate_id: 'berkas_candidate_id',
  file_url: 'file_url'
});

exports.Prisma.BerkasScalarFieldEnum = makeEnum({
  id: 'id',
  nama: 'nama',
  jenis_berkas: 'jenis_berkas'
});

exports.Prisma.BerkasAdminScalarFieldEnum = makeEnum({
  id: 'id',
  nim: 'nim',
  password: 'password'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.Role = makeEnum({
  USER: 'USER',
  CANDIDATE: 'CANDIDATE',
  ADMIN: 'ADMIN'
});

exports.Progress = makeEnum({
  SENT: 'SENT',
  ACCEPTED_MASTER: 'ACCEPTED_MASTER',
  ACCEPTED_CANDIDATE: 'ACCEPTED_CANDIDATE',
  REJECTED: 'REJECTED'
});

exports.ProgressBerkas = makeEnum({
  BELUM_MENGAMBIL: 'BELUM_MENGAMBIL',
  SUDAH_MENGAMBIL: 'SUDAH_MENGAMBIL',
  SUDAH_MENGUMPULKAN: 'SUDAH_MENGUMPULKAN'
});

exports.JenisBerkas = makeEnum({
  ALL: 'ALL',
  MWAWM: 'MWAWM',
  K3M: 'K3M'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Candidate: 'Candidate',
  Challenge: 'Challenge',
  ChallengeAnswer: 'ChallengeAnswer',
  Pelanggaran: 'Pelanggaran',
  Vote: 'Vote',
  BerkasCandidate: 'BerkasCandidate',
  BerkasUploaded: 'BerkasUploaded',
  Berkas: 'Berkas',
  BerkasAdmin: 'BerkasAdmin'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
