
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  nim: string
  email_itb: string
  email_non_itb: string
  long_name: string
  short_name: string
  fakultas: string
  role: Role
}

/**
 * Model Candidate
 * 
 */
export type Candidate = {
  id: string
  account_id: string
}

/**
 * Model Challenge
 * 
 */
export type Challenge = {
  id: string
  sender_id: string
  candidate_id: string
  payload: string
  progress: Progress
  created_at: Date
}

/**
 * Model ChallengeAnswer
 * 
 */
export type ChallengeAnswer = {
  id: string
  challenge_id: string
  answer: string
  created_at: Date
}

/**
 * Model Pelanggaran
 * 
 */
export type Pelanggaran = {
  id: string
  sender_id: string
  candidate_id: string
  keterangan: string
  bukti_url: string
  created_at: Date
}

/**
 * Model Vote
 * 
 */
export type Vote = {
  id: string
  voter_id: string
  candidate_id: string
  created_at: Date
}

/**
 * Model BerkasCandidate
 * 
 */
export type BerkasCandidate = {
  id: string
  nim: string
  password: string
  progress: ProgressBerkas
}

/**
 * Model BerkasUploaded
 * 
 */
export type BerkasUploaded = {
  id: string
  berkas_id: number
  berkas_candidate_id: string
  file_url: string
}

/**
 * Model Berkas
 * 
 */
export type Berkas = {
  id: number
  nama: string
  jenis_berkas: JenisBerkas
}

/**
 * Model BerkasAdmin
 * 
 */
export type BerkasAdmin = {
  id: string
  nim: string
  password: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  CANDIDATE: 'CANDIDATE',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Progress: {
  SENT: 'SENT',
  ACCEPTED_MASTER: 'ACCEPTED_MASTER',
  ACCEPTED_CANDIDATE: 'ACCEPTED_CANDIDATE',
  REJECTED: 'REJECTED'
};

export type Progress = (typeof Progress)[keyof typeof Progress]


export const ProgressBerkas: {
  BELUM_MENGAMBIL: 'BELUM_MENGAMBIL',
  SUDAH_MENGAMBIL: 'SUDAH_MENGAMBIL',
  SUDAH_MENGUMPULKAN: 'SUDAH_MENGUMPULKAN'
};

export type ProgressBerkas = (typeof ProgressBerkas)[keyof typeof ProgressBerkas]


export const JenisBerkas: {
  ALL: 'ALL',
  MWAWM: 'MWAWM',
  K3M: 'K3M'
};

export type JenisBerkas = (typeof JenisBerkas)[keyof typeof JenisBerkas]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<GlobalReject>;

  /**
   * `prisma.challenge`: Exposes CRUD operations for the **Challenge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Challenges
    * const challenges = await prisma.challenge.findMany()
    * ```
    */
  get challenge(): Prisma.ChallengeDelegate<GlobalReject>;

  /**
   * `prisma.challengeAnswer`: Exposes CRUD operations for the **ChallengeAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChallengeAnswers
    * const challengeAnswers = await prisma.challengeAnswer.findMany()
    * ```
    */
  get challengeAnswer(): Prisma.ChallengeAnswerDelegate<GlobalReject>;

  /**
   * `prisma.pelanggaran`: Exposes CRUD operations for the **Pelanggaran** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pelanggarans
    * const pelanggarans = await prisma.pelanggaran.findMany()
    * ```
    */
  get pelanggaran(): Prisma.PelanggaranDelegate<GlobalReject>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<GlobalReject>;

  /**
   * `prisma.berkasCandidate`: Exposes CRUD operations for the **BerkasCandidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BerkasCandidates
    * const berkasCandidates = await prisma.berkasCandidate.findMany()
    * ```
    */
  get berkasCandidate(): Prisma.BerkasCandidateDelegate<GlobalReject>;

  /**
   * `prisma.berkasUploaded`: Exposes CRUD operations for the **BerkasUploaded** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BerkasUploadeds
    * const berkasUploadeds = await prisma.berkasUploaded.findMany()
    * ```
    */
  get berkasUploaded(): Prisma.BerkasUploadedDelegate<GlobalReject>;

  /**
   * `prisma.berkas`: Exposes CRUD operations for the **Berkas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Berkas
    * const berkas = await prisma.berkas.findMany()
    * ```
    */
  get berkas(): Prisma.BerkasDelegate<GlobalReject>;

  /**
   * `prisma.berkasAdmin`: Exposes CRUD operations for the **BerkasAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BerkasAdmins
    * const berkasAdmins = await prisma.berkasAdmin.findMany()
    * ```
    */
  get berkasAdmin(): Prisma.BerkasAdminDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.7.0
   * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Candidate: 'Candidate',
    Challenge: 'Challenge',
    ChallengeAnswer: 'ChallengeAnswer',
    Pelanggaran: 'Pelanggaran',
    Vote: 'Vote',
    BerkasCandidate: 'BerkasCandidate',
    BerkasUploaded: 'BerkasUploaded',
    Berkas: 'Berkas',
    BerkasAdmin: 'BerkasAdmin'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Challenge: number
    Pelanggaran: number
    Vote: number
  }

  export type UserCountOutputTypeSelect = {
    Challenge?: boolean
    Pelanggaran?: boolean
    Vote?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CandidateCountOutputType
   */


  export type CandidateCountOutputType = {
    Challenge: number
    Pelanggaran: number
    Vote: number
  }

  export type CandidateCountOutputTypeSelect = {
    Challenge?: boolean
    Pelanggaran?: boolean
    Vote?: boolean
  }

  export type CandidateCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CandidateCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CandidateCountOutputType
    : S extends undefined
    ? never
    : S extends CandidateCountOutputTypeArgs
    ?'include' extends U
    ? CandidateCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof CandidateCountOutputType ?CandidateCountOutputType [P]
  : 
     never
  } 
    : CandidateCountOutputType
  : CandidateCountOutputType




  // Custom InputTypes

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     * 
    **/
    select?: CandidateCountOutputTypeSelect | null
  }



  /**
   * Count Type BerkasCandidateCountOutputType
   */


  export type BerkasCandidateCountOutputType = {
    BerkasUploaded: number
  }

  export type BerkasCandidateCountOutputTypeSelect = {
    BerkasUploaded?: boolean
  }

  export type BerkasCandidateCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BerkasCandidateCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BerkasCandidateCountOutputType
    : S extends undefined
    ? never
    : S extends BerkasCandidateCountOutputTypeArgs
    ?'include' extends U
    ? BerkasCandidateCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BerkasCandidateCountOutputType ?BerkasCandidateCountOutputType [P]
  : 
     never
  } 
    : BerkasCandidateCountOutputType
  : BerkasCandidateCountOutputType




  // Custom InputTypes

  /**
   * BerkasCandidateCountOutputType without action
   */
  export type BerkasCandidateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidateCountOutputType
     * 
    **/
    select?: BerkasCandidateCountOutputTypeSelect | null
  }



  /**
   * Count Type BerkasCountOutputType
   */


  export type BerkasCountOutputType = {
    BerkasUploaded: number
  }

  export type BerkasCountOutputTypeSelect = {
    BerkasUploaded?: boolean
  }

  export type BerkasCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BerkasCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BerkasCountOutputType
    : S extends undefined
    ? never
    : S extends BerkasCountOutputTypeArgs
    ?'include' extends U
    ? BerkasCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BerkasCountOutputType ?BerkasCountOutputType [P]
  : 
     never
  } 
    : BerkasCountOutputType
  : BerkasCountOutputType




  // Custom InputTypes

  /**
   * BerkasCountOutputType without action
   */
  export type BerkasCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BerkasCountOutputType
     * 
    **/
    select?: BerkasCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    nim: string | null
    email_itb: string | null
    email_non_itb: string | null
    long_name: string | null
    short_name: string | null
    fakultas: string | null
    role: Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    nim: string | null
    email_itb: string | null
    email_non_itb: string | null
    long_name: string | null
    short_name: string | null
    fakultas: string | null
    role: Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nim: number
    email_itb: number
    email_non_itb: number
    long_name: number
    short_name: number
    fakultas: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    nim?: true
    email_itb?: true
    email_non_itb?: true
    long_name?: true
    short_name?: true
    fakultas?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nim?: true
    email_itb?: true
    email_non_itb?: true
    long_name?: true
    short_name?: true
    fakultas?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nim?: true
    email_itb?: true
    email_non_itb?: true
    long_name?: true
    short_name?: true
    fakultas?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role: Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    nim?: boolean
    email_itb?: boolean
    email_non_itb?: boolean
    long_name?: boolean
    short_name?: boolean
    fakultas?: boolean
    role?: boolean
    candidate?: boolean | CandidateArgs
    Challenge?: boolean | ChallengeFindManyArgs
    Pelanggaran?: boolean | PelanggaranFindManyArgs
    Vote?: boolean | VoteFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    candidate?: boolean | CandidateArgs
    Challenge?: boolean | ChallengeFindManyArgs
    Pelanggaran?: boolean | PelanggaranFindManyArgs
    Vote?: boolean | VoteFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'candidate'
        ? CandidateGetPayload<S['include'][P]> | null :
        P extends 'Challenge'
        ? Array < ChallengeGetPayload<S['include'][P]>>  :
        P extends 'Pelanggaran'
        ? Array < PelanggaranGetPayload<S['include'][P]>>  :
        P extends 'Vote'
        ? Array < VoteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'candidate'
        ? CandidateGetPayload<S['select'][P]> | null :
        P extends 'Challenge'
        ? Array < ChallengeGetPayload<S['select'][P]>>  :
        P extends 'Pelanggaran'
        ? Array < PelanggaranGetPayload<S['select'][P]>>  :
        P extends 'Vote'
        ? Array < VoteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    Challenge<T extends ChallengeFindManyArgs = {}>(args?: Subset<T, ChallengeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Challenge>>, PrismaPromise<Array<ChallengeGetPayload<T>>>>;

    Pelanggaran<T extends PelanggaranFindManyArgs = {}>(args?: Subset<T, PelanggaranFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Pelanggaran>>, PrismaPromise<Array<PelanggaranGetPayload<T>>>>;

    Vote<T extends VoteFindManyArgs = {}>(args?: Subset<T, VoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Candidate
   */


  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateMinAggregateOutputType = {
    id: string | null
    account_id: string | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: string | null
    account_id: string | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    account_id: number
    _all: number
  }


  export type CandidateMinAggregateInputType = {
    id?: true
    account_id?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    account_id?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    account_id?: true
    _all?: true
  }

  export type CandidateAggregateArgs = {
    /**
     * Filter which Candidate to aggregate.
     * 
    **/
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs = {
    where?: CandidateWhereInput
    orderBy?: Enumerable<CandidateOrderByWithAggregationInput>
    by: Array<CandidateScalarFieldEnum>
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }


  export type CandidateGroupByOutputType = {
    id: string
    account_id: string
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Promise<
    Array<
      PickArray<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect = {
    id?: boolean
    account?: boolean | UserArgs
    account_id?: boolean
    Challenge?: boolean | ChallengeFindManyArgs
    Pelanggaran?: boolean | PelanggaranFindManyArgs
    Vote?: boolean | VoteFindManyArgs
    _count?: boolean | CandidateCountOutputTypeArgs
  }

  export type CandidateInclude = {
    account?: boolean | UserArgs
    Challenge?: boolean | ChallengeFindManyArgs
    Pelanggaran?: boolean | PelanggaranFindManyArgs
    Vote?: boolean | VoteFindManyArgs
    _count?: boolean | CandidateCountOutputTypeArgs
  }

  export type CandidateGetPayload<
    S extends boolean | null | undefined | CandidateArgs,
    U = keyof S
      > = S extends true
        ? Candidate
    : S extends undefined
    ? never
    : S extends CandidateArgs | CandidateFindManyArgs
    ?'include' extends U
    ? Candidate  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'account'
        ? UserGetPayload<S['include'][P]> :
        P extends 'Challenge'
        ? Array < ChallengeGetPayload<S['include'][P]>>  :
        P extends 'Pelanggaran'
        ? Array < PelanggaranGetPayload<S['include'][P]>>  :
        P extends 'Vote'
        ? Array < VoteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? CandidateCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Candidate ?Candidate [P]
  : 
          P extends 'account'
        ? UserGetPayload<S['select'][P]> :
        P extends 'Challenge'
        ? Array < ChallengeGetPayload<S['select'][P]>>  :
        P extends 'Pelanggaran'
        ? Array < PelanggaranGetPayload<S['select'][P]>>  :
        P extends 'Vote'
        ? Array < VoteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? CandidateCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Candidate
  : Candidate


  type CandidateCountArgs = Merge<
    Omit<CandidateFindManyArgs, 'select' | 'include'> & {
      select?: CandidateCountAggregateInputType | true
    }
  >

  export interface CandidateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Candidate'> extends True ? CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>> : CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Candidate'> extends True ? CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>> : CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CandidateFindManyArgs>(
      args?: SelectSubset<T, CandidateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Candidate>>, PrismaPromise<Array<CandidateGetPayload<T>>>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
    **/
    create<T extends CandidateCreateArgs>(
      args: SelectSubset<T, CandidateCreateArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Create many Candidates.
     *     @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     *     @example
     *     // Create many Candidates
     *     const candidate = await prisma.candidate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidateCreateManyArgs>(
      args?: SelectSubset<T, CandidateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
    **/
    delete<T extends CandidateDeleteArgs>(
      args: SelectSubset<T, CandidateDeleteArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateUpdateArgs>(
      args: SelectSubset<T, CandidateUpdateArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateDeleteManyArgs>(
      args?: SelectSubset<T, CandidateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateUpdateManyArgs>(
      args: SelectSubset<T, CandidateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateUpsertArgs>(
      args: SelectSubset<T, CandidateUpsertArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    account<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Challenge<T extends ChallengeFindManyArgs = {}>(args?: Subset<T, ChallengeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Challenge>>, PrismaPromise<Array<ChallengeGetPayload<T>>>>;

    Pelanggaran<T extends PelanggaranFindManyArgs = {}>(args?: Subset<T, PelanggaranFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Pelanggaran>>, PrismaPromise<Array<PelanggaranGetPayload<T>>>>;

    Vote<T extends VoteFindManyArgs = {}>(args?: Subset<T, VoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Throw an Error if a Candidate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Candidate to fetch.
     * 
    **/
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Throw an Error if a Candidate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Candidate to fetch.
     * 
    **/
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     * 
    **/
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     * 
    **/
    distinct?: Enumerable<CandidateScalarFieldEnum>
  }


  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Filter, which Candidates to fetch.
     * 
    **/
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     * 
    **/
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CandidateScalarFieldEnum>
  }


  /**
   * Candidate create
   */
  export type CandidateCreateArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * The data needed to create a Candidate.
     * 
    **/
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }


  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs = {
    data: Enumerable<CandidateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Candidate update
   */
  export type CandidateUpdateArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * The data needed to update a Candidate.
     * 
    **/
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     * 
    **/
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs = {
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    where?: CandidateWhereInput
  }


  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     * 
    **/
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     * 
    **/
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }


  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Filter which Candidate to delete.
     * 
    **/
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs = {
    where?: CandidateWhereInput
  }


  /**
   * Candidate without action
   */
  export type CandidateArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
  }



  /**
   * Model Challenge
   */


  export type AggregateChallenge = {
    _count: ChallengeCountAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  export type ChallengeMinAggregateOutputType = {
    id: string | null
    sender_id: string | null
    candidate_id: string | null
    payload: string | null
    progress: Progress | null
    created_at: Date | null
  }

  export type ChallengeMaxAggregateOutputType = {
    id: string | null
    sender_id: string | null
    candidate_id: string | null
    payload: string | null
    progress: Progress | null
    created_at: Date | null
  }

  export type ChallengeCountAggregateOutputType = {
    id: number
    sender_id: number
    candidate_id: number
    payload: number
    progress: number
    created_at: number
    _all: number
  }


  export type ChallengeMinAggregateInputType = {
    id?: true
    sender_id?: true
    candidate_id?: true
    payload?: true
    progress?: true
    created_at?: true
  }

  export type ChallengeMaxAggregateInputType = {
    id?: true
    sender_id?: true
    candidate_id?: true
    payload?: true
    progress?: true
    created_at?: true
  }

  export type ChallengeCountAggregateInputType = {
    id?: true
    sender_id?: true
    candidate_id?: true
    payload?: true
    progress?: true
    created_at?: true
    _all?: true
  }

  export type ChallengeAggregateArgs = {
    /**
     * Filter which Challenge to aggregate.
     * 
    **/
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     * 
    **/
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Challenges
    **/
    _count?: true | ChallengeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeMaxAggregateInputType
  }

  export type GetChallengeAggregateType<T extends ChallengeAggregateArgs> = {
        [P in keyof T & keyof AggregateChallenge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallenge[P]>
      : GetScalarType<T[P], AggregateChallenge[P]>
  }




  export type ChallengeGroupByArgs = {
    where?: ChallengeWhereInput
    orderBy?: Enumerable<ChallengeOrderByWithAggregationInput>
    by: Array<ChallengeScalarFieldEnum>
    having?: ChallengeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeCountAggregateInputType | true
    _min?: ChallengeMinAggregateInputType
    _max?: ChallengeMaxAggregateInputType
  }


  export type ChallengeGroupByOutputType = {
    id: string
    sender_id: string
    candidate_id: string
    payload: string
    progress: Progress
    created_at: Date
    _count: ChallengeCountAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  type GetChallengeGroupByPayload<T extends ChallengeGroupByArgs> = Promise<
    Array<
      PickArray<ChallengeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeSelect = {
    id?: boolean
    sender?: boolean | UserArgs
    sender_id?: boolean
    candidate?: boolean | CandidateArgs
    candidate_id?: boolean
    payload?: boolean
    progress?: boolean
    created_at?: boolean
    challenge_answer?: boolean | ChallengeAnswerArgs
  }

  export type ChallengeInclude = {
    sender?: boolean | UserArgs
    candidate?: boolean | CandidateArgs
    challenge_answer?: boolean | ChallengeAnswerArgs
  }

  export type ChallengeGetPayload<
    S extends boolean | null | undefined | ChallengeArgs,
    U = keyof S
      > = S extends true
        ? Challenge
    : S extends undefined
    ? never
    : S extends ChallengeArgs | ChallengeFindManyArgs
    ?'include' extends U
    ? Challenge  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sender'
        ? UserGetPayload<S['include'][P]> :
        P extends 'candidate'
        ? CandidateGetPayload<S['include'][P]> :
        P extends 'challenge_answer'
        ? ChallengeAnswerGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Challenge ?Challenge [P]
  : 
          P extends 'sender'
        ? UserGetPayload<S['select'][P]> :
        P extends 'candidate'
        ? CandidateGetPayload<S['select'][P]> :
        P extends 'challenge_answer'
        ? ChallengeAnswerGetPayload<S['select'][P]> | null : never
  } 
    : Challenge
  : Challenge


  type ChallengeCountArgs = Merge<
    Omit<ChallengeFindManyArgs, 'select' | 'include'> & {
      select?: ChallengeCountAggregateInputType | true
    }
  >

  export interface ChallengeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Challenge that matches the filter.
     * @param {ChallengeFindUniqueArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChallengeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChallengeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Challenge'> extends True ? CheckSelect<T, Prisma__ChallengeClient<Challenge>, Prisma__ChallengeClient<ChallengeGetPayload<T>>> : CheckSelect<T, Prisma__ChallengeClient<Challenge | null >, Prisma__ChallengeClient<ChallengeGetPayload<T> | null >>

    /**
     * Find the first Challenge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChallengeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChallengeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Challenge'> extends True ? CheckSelect<T, Prisma__ChallengeClient<Challenge>, Prisma__ChallengeClient<ChallengeGetPayload<T>>> : CheckSelect<T, Prisma__ChallengeClient<Challenge | null >, Prisma__ChallengeClient<ChallengeGetPayload<T> | null >>

    /**
     * Find zero or more Challenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Challenges
     * const challenges = await prisma.challenge.findMany()
     * 
     * // Get first 10 Challenges
     * const challenges = await prisma.challenge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeWithIdOnly = await prisma.challenge.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChallengeFindManyArgs>(
      args?: SelectSubset<T, ChallengeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Challenge>>, PrismaPromise<Array<ChallengeGetPayload<T>>>>

    /**
     * Create a Challenge.
     * @param {ChallengeCreateArgs} args - Arguments to create a Challenge.
     * @example
     * // Create one Challenge
     * const Challenge = await prisma.challenge.create({
     *   data: {
     *     // ... data to create a Challenge
     *   }
     * })
     * 
    **/
    create<T extends ChallengeCreateArgs>(
      args: SelectSubset<T, ChallengeCreateArgs>
    ): CheckSelect<T, Prisma__ChallengeClient<Challenge>, Prisma__ChallengeClient<ChallengeGetPayload<T>>>

    /**
     * Create many Challenges.
     *     @param {ChallengeCreateManyArgs} args - Arguments to create many Challenges.
     *     @example
     *     // Create many Challenges
     *     const challenge = await prisma.challenge.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChallengeCreateManyArgs>(
      args?: SelectSubset<T, ChallengeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Challenge.
     * @param {ChallengeDeleteArgs} args - Arguments to delete one Challenge.
     * @example
     * // Delete one Challenge
     * const Challenge = await prisma.challenge.delete({
     *   where: {
     *     // ... filter to delete one Challenge
     *   }
     * })
     * 
    **/
    delete<T extends ChallengeDeleteArgs>(
      args: SelectSubset<T, ChallengeDeleteArgs>
    ): CheckSelect<T, Prisma__ChallengeClient<Challenge>, Prisma__ChallengeClient<ChallengeGetPayload<T>>>

    /**
     * Update one Challenge.
     * @param {ChallengeUpdateArgs} args - Arguments to update one Challenge.
     * @example
     * // Update one Challenge
     * const challenge = await prisma.challenge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChallengeUpdateArgs>(
      args: SelectSubset<T, ChallengeUpdateArgs>
    ): CheckSelect<T, Prisma__ChallengeClient<Challenge>, Prisma__ChallengeClient<ChallengeGetPayload<T>>>

    /**
     * Delete zero or more Challenges.
     * @param {ChallengeDeleteManyArgs} args - Arguments to filter Challenges to delete.
     * @example
     * // Delete a few Challenges
     * const { count } = await prisma.challenge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChallengeDeleteManyArgs>(
      args?: SelectSubset<T, ChallengeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Challenges
     * const challenge = await prisma.challenge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChallengeUpdateManyArgs>(
      args: SelectSubset<T, ChallengeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Challenge.
     * @param {ChallengeUpsertArgs} args - Arguments to update or create a Challenge.
     * @example
     * // Update or create a Challenge
     * const challenge = await prisma.challenge.upsert({
     *   create: {
     *     // ... data to create a Challenge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Challenge we want to update
     *   }
     * })
    **/
    upsert<T extends ChallengeUpsertArgs>(
      args: SelectSubset<T, ChallengeUpsertArgs>
    ): CheckSelect<T, Prisma__ChallengeClient<Challenge>, Prisma__ChallengeClient<ChallengeGetPayload<T>>>

    /**
     * Count the number of Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCountArgs} args - Arguments to filter Challenges to count.
     * @example
     * // Count the number of Challenges
     * const count = await prisma.challenge.count({
     *   where: {
     *     // ... the filter for the Challenges we want to count
     *   }
     * })
    **/
    count<T extends ChallengeCountArgs>(
      args?: Subset<T, ChallengeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeAggregateArgs>(args: Subset<T, ChallengeAggregateArgs>): PrismaPromise<GetChallengeAggregateType<T>>

    /**
     * Group by Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Challenge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChallengeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sender<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    challenge_answer<T extends ChallengeAnswerArgs = {}>(args?: Subset<T, ChallengeAnswerArgs>): CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer | null >, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Challenge findUnique
   */
  export type ChallengeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * Throw an Error if a Challenge can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Challenge to fetch.
     * 
    **/
    where: ChallengeWhereUniqueInput
  }


  /**
   * Challenge findFirst
   */
  export type ChallengeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * Throw an Error if a Challenge can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Challenge to fetch.
     * 
    **/
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     * 
    **/
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     * 
    **/
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     * 
    **/
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * Challenge findMany
   */
  export type ChallengeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * Filter, which Challenges to fetch.
     * 
    **/
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     * 
    **/
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Challenges.
     * 
    **/
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * Challenge create
   */
  export type ChallengeCreateArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * The data needed to create a Challenge.
     * 
    **/
    data: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
  }


  /**
   * Challenge createMany
   */
  export type ChallengeCreateManyArgs = {
    data: Enumerable<ChallengeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Challenge update
   */
  export type ChallengeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * The data needed to update a Challenge.
     * 
    **/
    data: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
    /**
     * Choose, which Challenge to update.
     * 
    **/
    where: ChallengeWhereUniqueInput
  }


  /**
   * Challenge updateMany
   */
  export type ChallengeUpdateManyArgs = {
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyInput>
    where?: ChallengeWhereInput
  }


  /**
   * Challenge upsert
   */
  export type ChallengeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * The filter to search for the Challenge to update in case it exists.
     * 
    **/
    where: ChallengeWhereUniqueInput
    /**
     * In case the Challenge found by the `where` argument doesn't exist, create a new Challenge with this data.
     * 
    **/
    create: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
    /**
     * In case the Challenge was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
  }


  /**
   * Challenge delete
   */
  export type ChallengeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
    /**
     * Filter which Challenge to delete.
     * 
    **/
    where: ChallengeWhereUniqueInput
  }


  /**
   * Challenge deleteMany
   */
  export type ChallengeDeleteManyArgs = {
    where?: ChallengeWhereInput
  }


  /**
   * Challenge without action
   */
  export type ChallengeArgs = {
    /**
     * Select specific fields to fetch from the Challenge
     * 
    **/
    select?: ChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeInclude | null
  }



  /**
   * Model ChallengeAnswer
   */


  export type AggregateChallengeAnswer = {
    _count: ChallengeAnswerCountAggregateOutputType | null
    _min: ChallengeAnswerMinAggregateOutputType | null
    _max: ChallengeAnswerMaxAggregateOutputType | null
  }

  export type ChallengeAnswerMinAggregateOutputType = {
    id: string | null
    challenge_id: string | null
    answer: string | null
    created_at: Date | null
  }

  export type ChallengeAnswerMaxAggregateOutputType = {
    id: string | null
    challenge_id: string | null
    answer: string | null
    created_at: Date | null
  }

  export type ChallengeAnswerCountAggregateOutputType = {
    id: number
    challenge_id: number
    answer: number
    created_at: number
    _all: number
  }


  export type ChallengeAnswerMinAggregateInputType = {
    id?: true
    challenge_id?: true
    answer?: true
    created_at?: true
  }

  export type ChallengeAnswerMaxAggregateInputType = {
    id?: true
    challenge_id?: true
    answer?: true
    created_at?: true
  }

  export type ChallengeAnswerCountAggregateInputType = {
    id?: true
    challenge_id?: true
    answer?: true
    created_at?: true
    _all?: true
  }

  export type ChallengeAnswerAggregateArgs = {
    /**
     * Filter which ChallengeAnswer to aggregate.
     * 
    **/
    where?: ChallengeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeAnswers to fetch.
     * 
    **/
    orderBy?: Enumerable<ChallengeAnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ChallengeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeAnswers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeAnswers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChallengeAnswers
    **/
    _count?: true | ChallengeAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeAnswerMaxAggregateInputType
  }

  export type GetChallengeAnswerAggregateType<T extends ChallengeAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateChallengeAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallengeAnswer[P]>
      : GetScalarType<T[P], AggregateChallengeAnswer[P]>
  }




  export type ChallengeAnswerGroupByArgs = {
    where?: ChallengeAnswerWhereInput
    orderBy?: Enumerable<ChallengeAnswerOrderByWithAggregationInput>
    by: Array<ChallengeAnswerScalarFieldEnum>
    having?: ChallengeAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeAnswerCountAggregateInputType | true
    _min?: ChallengeAnswerMinAggregateInputType
    _max?: ChallengeAnswerMaxAggregateInputType
  }


  export type ChallengeAnswerGroupByOutputType = {
    id: string
    challenge_id: string
    answer: string
    created_at: Date
    _count: ChallengeAnswerCountAggregateOutputType | null
    _min: ChallengeAnswerMinAggregateOutputType | null
    _max: ChallengeAnswerMaxAggregateOutputType | null
  }

  type GetChallengeAnswerGroupByPayload<T extends ChallengeAnswerGroupByArgs> = Promise<
    Array<
      PickArray<ChallengeAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeAnswerGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeAnswerSelect = {
    id?: boolean
    challenge?: boolean | ChallengeArgs
    challenge_id?: boolean
    answer?: boolean
    created_at?: boolean
  }

  export type ChallengeAnswerInclude = {
    challenge?: boolean | ChallengeArgs
  }

  export type ChallengeAnswerGetPayload<
    S extends boolean | null | undefined | ChallengeAnswerArgs,
    U = keyof S
      > = S extends true
        ? ChallengeAnswer
    : S extends undefined
    ? never
    : S extends ChallengeAnswerArgs | ChallengeAnswerFindManyArgs
    ?'include' extends U
    ? ChallengeAnswer  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'challenge'
        ? ChallengeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ChallengeAnswer ?ChallengeAnswer [P]
  : 
          P extends 'challenge'
        ? ChallengeGetPayload<S['select'][P]> : never
  } 
    : ChallengeAnswer
  : ChallengeAnswer


  type ChallengeAnswerCountArgs = Merge<
    Omit<ChallengeAnswerFindManyArgs, 'select' | 'include'> & {
      select?: ChallengeAnswerCountAggregateInputType | true
    }
  >

  export interface ChallengeAnswerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ChallengeAnswer that matches the filter.
     * @param {ChallengeAnswerFindUniqueArgs} args - Arguments to find a ChallengeAnswer
     * @example
     * // Get one ChallengeAnswer
     * const challengeAnswer = await prisma.challengeAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChallengeAnswerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChallengeAnswerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChallengeAnswer'> extends True ? CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer>, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T>>> : CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer | null >, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T> | null >>

    /**
     * Find the first ChallengeAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAnswerFindFirstArgs} args - Arguments to find a ChallengeAnswer
     * @example
     * // Get one ChallengeAnswer
     * const challengeAnswer = await prisma.challengeAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChallengeAnswerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChallengeAnswerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChallengeAnswer'> extends True ? CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer>, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T>>> : CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer | null >, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T> | null >>

    /**
     * Find zero or more ChallengeAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAnswerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChallengeAnswers
     * const challengeAnswers = await prisma.challengeAnswer.findMany()
     * 
     * // Get first 10 ChallengeAnswers
     * const challengeAnswers = await prisma.challengeAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeAnswerWithIdOnly = await prisma.challengeAnswer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChallengeAnswerFindManyArgs>(
      args?: SelectSubset<T, ChallengeAnswerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ChallengeAnswer>>, PrismaPromise<Array<ChallengeAnswerGetPayload<T>>>>

    /**
     * Create a ChallengeAnswer.
     * @param {ChallengeAnswerCreateArgs} args - Arguments to create a ChallengeAnswer.
     * @example
     * // Create one ChallengeAnswer
     * const ChallengeAnswer = await prisma.challengeAnswer.create({
     *   data: {
     *     // ... data to create a ChallengeAnswer
     *   }
     * })
     * 
    **/
    create<T extends ChallengeAnswerCreateArgs>(
      args: SelectSubset<T, ChallengeAnswerCreateArgs>
    ): CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer>, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T>>>

    /**
     * Create many ChallengeAnswers.
     *     @param {ChallengeAnswerCreateManyArgs} args - Arguments to create many ChallengeAnswers.
     *     @example
     *     // Create many ChallengeAnswers
     *     const challengeAnswer = await prisma.challengeAnswer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChallengeAnswerCreateManyArgs>(
      args?: SelectSubset<T, ChallengeAnswerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ChallengeAnswer.
     * @param {ChallengeAnswerDeleteArgs} args - Arguments to delete one ChallengeAnswer.
     * @example
     * // Delete one ChallengeAnswer
     * const ChallengeAnswer = await prisma.challengeAnswer.delete({
     *   where: {
     *     // ... filter to delete one ChallengeAnswer
     *   }
     * })
     * 
    **/
    delete<T extends ChallengeAnswerDeleteArgs>(
      args: SelectSubset<T, ChallengeAnswerDeleteArgs>
    ): CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer>, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T>>>

    /**
     * Update one ChallengeAnswer.
     * @param {ChallengeAnswerUpdateArgs} args - Arguments to update one ChallengeAnswer.
     * @example
     * // Update one ChallengeAnswer
     * const challengeAnswer = await prisma.challengeAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChallengeAnswerUpdateArgs>(
      args: SelectSubset<T, ChallengeAnswerUpdateArgs>
    ): CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer>, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T>>>

    /**
     * Delete zero or more ChallengeAnswers.
     * @param {ChallengeAnswerDeleteManyArgs} args - Arguments to filter ChallengeAnswers to delete.
     * @example
     * // Delete a few ChallengeAnswers
     * const { count } = await prisma.challengeAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChallengeAnswerDeleteManyArgs>(
      args?: SelectSubset<T, ChallengeAnswerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChallengeAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChallengeAnswers
     * const challengeAnswer = await prisma.challengeAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChallengeAnswerUpdateManyArgs>(
      args: SelectSubset<T, ChallengeAnswerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ChallengeAnswer.
     * @param {ChallengeAnswerUpsertArgs} args - Arguments to update or create a ChallengeAnswer.
     * @example
     * // Update or create a ChallengeAnswer
     * const challengeAnswer = await prisma.challengeAnswer.upsert({
     *   create: {
     *     // ... data to create a ChallengeAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChallengeAnswer we want to update
     *   }
     * })
    **/
    upsert<T extends ChallengeAnswerUpsertArgs>(
      args: SelectSubset<T, ChallengeAnswerUpsertArgs>
    ): CheckSelect<T, Prisma__ChallengeAnswerClient<ChallengeAnswer>, Prisma__ChallengeAnswerClient<ChallengeAnswerGetPayload<T>>>

    /**
     * Count the number of ChallengeAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAnswerCountArgs} args - Arguments to filter ChallengeAnswers to count.
     * @example
     * // Count the number of ChallengeAnswers
     * const count = await prisma.challengeAnswer.count({
     *   where: {
     *     // ... the filter for the ChallengeAnswers we want to count
     *   }
     * })
    **/
    count<T extends ChallengeAnswerCountArgs>(
      args?: Subset<T, ChallengeAnswerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChallengeAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeAnswerAggregateArgs>(args: Subset<T, ChallengeAnswerAggregateArgs>): PrismaPromise<GetChallengeAnswerAggregateType<T>>

    /**
     * Group by ChallengeAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeAnswerGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeAnswerGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChallengeAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChallengeAnswerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    challenge<T extends ChallengeArgs = {}>(args?: Subset<T, ChallengeArgs>): CheckSelect<T, Prisma__ChallengeClient<Challenge | null >, Prisma__ChallengeClient<ChallengeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ChallengeAnswer findUnique
   */
  export type ChallengeAnswerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * Throw an Error if a ChallengeAnswer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ChallengeAnswer to fetch.
     * 
    **/
    where: ChallengeAnswerWhereUniqueInput
  }


  /**
   * ChallengeAnswer findFirst
   */
  export type ChallengeAnswerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * Throw an Error if a ChallengeAnswer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ChallengeAnswer to fetch.
     * 
    **/
    where?: ChallengeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeAnswers to fetch.
     * 
    **/
    orderBy?: Enumerable<ChallengeAnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChallengeAnswers.
     * 
    **/
    cursor?: ChallengeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeAnswers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeAnswers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChallengeAnswers.
     * 
    **/
    distinct?: Enumerable<ChallengeAnswerScalarFieldEnum>
  }


  /**
   * ChallengeAnswer findMany
   */
  export type ChallengeAnswerFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * Filter, which ChallengeAnswers to fetch.
     * 
    **/
    where?: ChallengeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeAnswers to fetch.
     * 
    **/
    orderBy?: Enumerable<ChallengeAnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChallengeAnswers.
     * 
    **/
    cursor?: ChallengeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeAnswers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeAnswers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ChallengeAnswerScalarFieldEnum>
  }


  /**
   * ChallengeAnswer create
   */
  export type ChallengeAnswerCreateArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * The data needed to create a ChallengeAnswer.
     * 
    **/
    data: XOR<ChallengeAnswerCreateInput, ChallengeAnswerUncheckedCreateInput>
  }


  /**
   * ChallengeAnswer createMany
   */
  export type ChallengeAnswerCreateManyArgs = {
    data: Enumerable<ChallengeAnswerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChallengeAnswer update
   */
  export type ChallengeAnswerUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * The data needed to update a ChallengeAnswer.
     * 
    **/
    data: XOR<ChallengeAnswerUpdateInput, ChallengeAnswerUncheckedUpdateInput>
    /**
     * Choose, which ChallengeAnswer to update.
     * 
    **/
    where: ChallengeAnswerWhereUniqueInput
  }


  /**
   * ChallengeAnswer updateMany
   */
  export type ChallengeAnswerUpdateManyArgs = {
    data: XOR<ChallengeAnswerUpdateManyMutationInput, ChallengeAnswerUncheckedUpdateManyInput>
    where?: ChallengeAnswerWhereInput
  }


  /**
   * ChallengeAnswer upsert
   */
  export type ChallengeAnswerUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * The filter to search for the ChallengeAnswer to update in case it exists.
     * 
    **/
    where: ChallengeAnswerWhereUniqueInput
    /**
     * In case the ChallengeAnswer found by the `where` argument doesn't exist, create a new ChallengeAnswer with this data.
     * 
    **/
    create: XOR<ChallengeAnswerCreateInput, ChallengeAnswerUncheckedCreateInput>
    /**
     * In case the ChallengeAnswer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ChallengeAnswerUpdateInput, ChallengeAnswerUncheckedUpdateInput>
  }


  /**
   * ChallengeAnswer delete
   */
  export type ChallengeAnswerDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
    /**
     * Filter which ChallengeAnswer to delete.
     * 
    **/
    where: ChallengeAnswerWhereUniqueInput
  }


  /**
   * ChallengeAnswer deleteMany
   */
  export type ChallengeAnswerDeleteManyArgs = {
    where?: ChallengeAnswerWhereInput
  }


  /**
   * ChallengeAnswer without action
   */
  export type ChallengeAnswerArgs = {
    /**
     * Select specific fields to fetch from the ChallengeAnswer
     * 
    **/
    select?: ChallengeAnswerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChallengeAnswerInclude | null
  }



  /**
   * Model Pelanggaran
   */


  export type AggregatePelanggaran = {
    _count: PelanggaranCountAggregateOutputType | null
    _min: PelanggaranMinAggregateOutputType | null
    _max: PelanggaranMaxAggregateOutputType | null
  }

  export type PelanggaranMinAggregateOutputType = {
    id: string | null
    sender_id: string | null
    candidate_id: string | null
    keterangan: string | null
    bukti_url: string | null
    created_at: Date | null
  }

  export type PelanggaranMaxAggregateOutputType = {
    id: string | null
    sender_id: string | null
    candidate_id: string | null
    keterangan: string | null
    bukti_url: string | null
    created_at: Date | null
  }

  export type PelanggaranCountAggregateOutputType = {
    id: number
    sender_id: number
    candidate_id: number
    keterangan: number
    bukti_url: number
    created_at: number
    _all: number
  }


  export type PelanggaranMinAggregateInputType = {
    id?: true
    sender_id?: true
    candidate_id?: true
    keterangan?: true
    bukti_url?: true
    created_at?: true
  }

  export type PelanggaranMaxAggregateInputType = {
    id?: true
    sender_id?: true
    candidate_id?: true
    keterangan?: true
    bukti_url?: true
    created_at?: true
  }

  export type PelanggaranCountAggregateInputType = {
    id?: true
    sender_id?: true
    candidate_id?: true
    keterangan?: true
    bukti_url?: true
    created_at?: true
    _all?: true
  }

  export type PelanggaranAggregateArgs = {
    /**
     * Filter which Pelanggaran to aggregate.
     * 
    **/
    where?: PelanggaranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pelanggarans to fetch.
     * 
    **/
    orderBy?: Enumerable<PelanggaranOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PelanggaranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pelanggarans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pelanggarans.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pelanggarans
    **/
    _count?: true | PelanggaranCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PelanggaranMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PelanggaranMaxAggregateInputType
  }

  export type GetPelanggaranAggregateType<T extends PelanggaranAggregateArgs> = {
        [P in keyof T & keyof AggregatePelanggaran]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePelanggaran[P]>
      : GetScalarType<T[P], AggregatePelanggaran[P]>
  }




  export type PelanggaranGroupByArgs = {
    where?: PelanggaranWhereInput
    orderBy?: Enumerable<PelanggaranOrderByWithAggregationInput>
    by: Array<PelanggaranScalarFieldEnum>
    having?: PelanggaranScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PelanggaranCountAggregateInputType | true
    _min?: PelanggaranMinAggregateInputType
    _max?: PelanggaranMaxAggregateInputType
  }


  export type PelanggaranGroupByOutputType = {
    id: string
    sender_id: string
    candidate_id: string
    keterangan: string
    bukti_url: string
    created_at: Date
    _count: PelanggaranCountAggregateOutputType | null
    _min: PelanggaranMinAggregateOutputType | null
    _max: PelanggaranMaxAggregateOutputType | null
  }

  type GetPelanggaranGroupByPayload<T extends PelanggaranGroupByArgs> = Promise<
    Array<
      PickArray<PelanggaranGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PelanggaranGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PelanggaranGroupByOutputType[P]>
            : GetScalarType<T[P], PelanggaranGroupByOutputType[P]>
        }
      >
    >


  export type PelanggaranSelect = {
    id?: boolean
    sender?: boolean | UserArgs
    sender_id?: boolean
    candidate?: boolean | CandidateArgs
    candidate_id?: boolean
    keterangan?: boolean
    bukti_url?: boolean
    created_at?: boolean
  }

  export type PelanggaranInclude = {
    sender?: boolean | UserArgs
    candidate?: boolean | CandidateArgs
  }

  export type PelanggaranGetPayload<
    S extends boolean | null | undefined | PelanggaranArgs,
    U = keyof S
      > = S extends true
        ? Pelanggaran
    : S extends undefined
    ? never
    : S extends PelanggaranArgs | PelanggaranFindManyArgs
    ?'include' extends U
    ? Pelanggaran  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sender'
        ? UserGetPayload<S['include'][P]> :
        P extends 'candidate'
        ? CandidateGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Pelanggaran ?Pelanggaran [P]
  : 
          P extends 'sender'
        ? UserGetPayload<S['select'][P]> :
        P extends 'candidate'
        ? CandidateGetPayload<S['select'][P]> : never
  } 
    : Pelanggaran
  : Pelanggaran


  type PelanggaranCountArgs = Merge<
    Omit<PelanggaranFindManyArgs, 'select' | 'include'> & {
      select?: PelanggaranCountAggregateInputType | true
    }
  >

  export interface PelanggaranDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Pelanggaran that matches the filter.
     * @param {PelanggaranFindUniqueArgs} args - Arguments to find a Pelanggaran
     * @example
     * // Get one Pelanggaran
     * const pelanggaran = await prisma.pelanggaran.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PelanggaranFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PelanggaranFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pelanggaran'> extends True ? CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran>, Prisma__PelanggaranClient<PelanggaranGetPayload<T>>> : CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran | null >, Prisma__PelanggaranClient<PelanggaranGetPayload<T> | null >>

    /**
     * Find the first Pelanggaran that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PelanggaranFindFirstArgs} args - Arguments to find a Pelanggaran
     * @example
     * // Get one Pelanggaran
     * const pelanggaran = await prisma.pelanggaran.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PelanggaranFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PelanggaranFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pelanggaran'> extends True ? CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran>, Prisma__PelanggaranClient<PelanggaranGetPayload<T>>> : CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran | null >, Prisma__PelanggaranClient<PelanggaranGetPayload<T> | null >>

    /**
     * Find zero or more Pelanggarans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PelanggaranFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pelanggarans
     * const pelanggarans = await prisma.pelanggaran.findMany()
     * 
     * // Get first 10 Pelanggarans
     * const pelanggarans = await prisma.pelanggaran.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pelanggaranWithIdOnly = await prisma.pelanggaran.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PelanggaranFindManyArgs>(
      args?: SelectSubset<T, PelanggaranFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Pelanggaran>>, PrismaPromise<Array<PelanggaranGetPayload<T>>>>

    /**
     * Create a Pelanggaran.
     * @param {PelanggaranCreateArgs} args - Arguments to create a Pelanggaran.
     * @example
     * // Create one Pelanggaran
     * const Pelanggaran = await prisma.pelanggaran.create({
     *   data: {
     *     // ... data to create a Pelanggaran
     *   }
     * })
     * 
    **/
    create<T extends PelanggaranCreateArgs>(
      args: SelectSubset<T, PelanggaranCreateArgs>
    ): CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran>, Prisma__PelanggaranClient<PelanggaranGetPayload<T>>>

    /**
     * Create many Pelanggarans.
     *     @param {PelanggaranCreateManyArgs} args - Arguments to create many Pelanggarans.
     *     @example
     *     // Create many Pelanggarans
     *     const pelanggaran = await prisma.pelanggaran.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PelanggaranCreateManyArgs>(
      args?: SelectSubset<T, PelanggaranCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pelanggaran.
     * @param {PelanggaranDeleteArgs} args - Arguments to delete one Pelanggaran.
     * @example
     * // Delete one Pelanggaran
     * const Pelanggaran = await prisma.pelanggaran.delete({
     *   where: {
     *     // ... filter to delete one Pelanggaran
     *   }
     * })
     * 
    **/
    delete<T extends PelanggaranDeleteArgs>(
      args: SelectSubset<T, PelanggaranDeleteArgs>
    ): CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran>, Prisma__PelanggaranClient<PelanggaranGetPayload<T>>>

    /**
     * Update one Pelanggaran.
     * @param {PelanggaranUpdateArgs} args - Arguments to update one Pelanggaran.
     * @example
     * // Update one Pelanggaran
     * const pelanggaran = await prisma.pelanggaran.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PelanggaranUpdateArgs>(
      args: SelectSubset<T, PelanggaranUpdateArgs>
    ): CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran>, Prisma__PelanggaranClient<PelanggaranGetPayload<T>>>

    /**
     * Delete zero or more Pelanggarans.
     * @param {PelanggaranDeleteManyArgs} args - Arguments to filter Pelanggarans to delete.
     * @example
     * // Delete a few Pelanggarans
     * const { count } = await prisma.pelanggaran.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PelanggaranDeleteManyArgs>(
      args?: SelectSubset<T, PelanggaranDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pelanggarans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PelanggaranUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pelanggarans
     * const pelanggaran = await prisma.pelanggaran.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PelanggaranUpdateManyArgs>(
      args: SelectSubset<T, PelanggaranUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pelanggaran.
     * @param {PelanggaranUpsertArgs} args - Arguments to update or create a Pelanggaran.
     * @example
     * // Update or create a Pelanggaran
     * const pelanggaran = await prisma.pelanggaran.upsert({
     *   create: {
     *     // ... data to create a Pelanggaran
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pelanggaran we want to update
     *   }
     * })
    **/
    upsert<T extends PelanggaranUpsertArgs>(
      args: SelectSubset<T, PelanggaranUpsertArgs>
    ): CheckSelect<T, Prisma__PelanggaranClient<Pelanggaran>, Prisma__PelanggaranClient<PelanggaranGetPayload<T>>>

    /**
     * Count the number of Pelanggarans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PelanggaranCountArgs} args - Arguments to filter Pelanggarans to count.
     * @example
     * // Count the number of Pelanggarans
     * const count = await prisma.pelanggaran.count({
     *   where: {
     *     // ... the filter for the Pelanggarans we want to count
     *   }
     * })
    **/
    count<T extends PelanggaranCountArgs>(
      args?: Subset<T, PelanggaranCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PelanggaranCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pelanggaran.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PelanggaranAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PelanggaranAggregateArgs>(args: Subset<T, PelanggaranAggregateArgs>): PrismaPromise<GetPelanggaranAggregateType<T>>

    /**
     * Group by Pelanggaran.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PelanggaranGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PelanggaranGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PelanggaranGroupByArgs['orderBy'] }
        : { orderBy?: PelanggaranGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PelanggaranGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPelanggaranGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pelanggaran.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PelanggaranClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sender<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Pelanggaran findUnique
   */
  export type PelanggaranFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * Throw an Error if a Pelanggaran can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Pelanggaran to fetch.
     * 
    **/
    where: PelanggaranWhereUniqueInput
  }


  /**
   * Pelanggaran findFirst
   */
  export type PelanggaranFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * Throw an Error if a Pelanggaran can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Pelanggaran to fetch.
     * 
    **/
    where?: PelanggaranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pelanggarans to fetch.
     * 
    **/
    orderBy?: Enumerable<PelanggaranOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pelanggarans.
     * 
    **/
    cursor?: PelanggaranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pelanggarans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pelanggarans.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pelanggarans.
     * 
    **/
    distinct?: Enumerable<PelanggaranScalarFieldEnum>
  }


  /**
   * Pelanggaran findMany
   */
  export type PelanggaranFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * Filter, which Pelanggarans to fetch.
     * 
    **/
    where?: PelanggaranWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pelanggarans to fetch.
     * 
    **/
    orderBy?: Enumerable<PelanggaranOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pelanggarans.
     * 
    **/
    cursor?: PelanggaranWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pelanggarans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pelanggarans.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PelanggaranScalarFieldEnum>
  }


  /**
   * Pelanggaran create
   */
  export type PelanggaranCreateArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * The data needed to create a Pelanggaran.
     * 
    **/
    data: XOR<PelanggaranCreateInput, PelanggaranUncheckedCreateInput>
  }


  /**
   * Pelanggaran createMany
   */
  export type PelanggaranCreateManyArgs = {
    data: Enumerable<PelanggaranCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pelanggaran update
   */
  export type PelanggaranUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * The data needed to update a Pelanggaran.
     * 
    **/
    data: XOR<PelanggaranUpdateInput, PelanggaranUncheckedUpdateInput>
    /**
     * Choose, which Pelanggaran to update.
     * 
    **/
    where: PelanggaranWhereUniqueInput
  }


  /**
   * Pelanggaran updateMany
   */
  export type PelanggaranUpdateManyArgs = {
    data: XOR<PelanggaranUpdateManyMutationInput, PelanggaranUncheckedUpdateManyInput>
    where?: PelanggaranWhereInput
  }


  /**
   * Pelanggaran upsert
   */
  export type PelanggaranUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * The filter to search for the Pelanggaran to update in case it exists.
     * 
    **/
    where: PelanggaranWhereUniqueInput
    /**
     * In case the Pelanggaran found by the `where` argument doesn't exist, create a new Pelanggaran with this data.
     * 
    **/
    create: XOR<PelanggaranCreateInput, PelanggaranUncheckedCreateInput>
    /**
     * In case the Pelanggaran was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PelanggaranUpdateInput, PelanggaranUncheckedUpdateInput>
  }


  /**
   * Pelanggaran delete
   */
  export type PelanggaranDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
    /**
     * Filter which Pelanggaran to delete.
     * 
    **/
    where: PelanggaranWhereUniqueInput
  }


  /**
   * Pelanggaran deleteMany
   */
  export type PelanggaranDeleteManyArgs = {
    where?: PelanggaranWhereInput
  }


  /**
   * Pelanggaran without action
   */
  export type PelanggaranArgs = {
    /**
     * Select specific fields to fetch from the Pelanggaran
     * 
    **/
    select?: PelanggaranSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PelanggaranInclude | null
  }



  /**
   * Model Vote
   */


  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteMinAggregateOutputType = {
    id: string | null
    voter_id: string | null
    candidate_id: string | null
    created_at: Date | null
  }

  export type VoteMaxAggregateOutputType = {
    id: string | null
    voter_id: string | null
    candidate_id: string | null
    created_at: Date | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    voter_id: number
    candidate_id: number
    created_at: number
    _all: number
  }


  export type VoteMinAggregateInputType = {
    id?: true
    voter_id?: true
    candidate_id?: true
    created_at?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    voter_id?: true
    candidate_id?: true
    created_at?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    voter_id?: true
    candidate_id?: true
    created_at?: true
    _all?: true
  }

  export type VoteAggregateArgs = {
    /**
     * Filter which Vote to aggregate.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs = {
    where?: VoteWhereInput
    orderBy?: Enumerable<VoteOrderByWithAggregationInput>
    by: Array<VoteScalarFieldEnum>
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }


  export type VoteGroupByOutputType = {
    id: string
    voter_id: string
    candidate_id: string
    created_at: Date
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Promise<
    Array<
      PickArray<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect = {
    id?: boolean
    voter?: boolean | UserArgs
    voter_id?: boolean
    candidate?: boolean | CandidateArgs
    candidate_id?: boolean
    created_at?: boolean
  }

  export type VoteInclude = {
    voter?: boolean | UserArgs
    candidate?: boolean | CandidateArgs
  }

  export type VoteGetPayload<
    S extends boolean | null | undefined | VoteArgs,
    U = keyof S
      > = S extends true
        ? Vote
    : S extends undefined
    ? never
    : S extends VoteArgs | VoteFindManyArgs
    ?'include' extends U
    ? Vote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'voter'
        ? UserGetPayload<S['include'][P]> :
        P extends 'candidate'
        ? CandidateGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Vote ?Vote [P]
  : 
          P extends 'voter'
        ? UserGetPayload<S['select'][P]> :
        P extends 'candidate'
        ? CandidateGetPayload<S['select'][P]> : never
  } 
    : Vote
  : Vote


  type VoteCountArgs = Merge<
    Omit<VoteFindManyArgs, 'select' | 'include'> & {
      select?: VoteCountAggregateInputType | true
    }
  >

  export interface VoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vote'> extends True ? CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>> : CheckSelect<T, Prisma__VoteClient<Vote | null >, Prisma__VoteClient<VoteGetPayload<T> | null >>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vote'> extends True ? CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>> : CheckSelect<T, Prisma__VoteClient<Vote | null >, Prisma__VoteClient<VoteGetPayload<T> | null >>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VoteFindManyArgs>(
      args?: SelectSubset<T, VoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends VoteCreateArgs>(
      args: SelectSubset<T, VoteCreateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Create many Votes.
     *     @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     *     @example
     *     // Create many Votes
     *     const vote = await prisma.vote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VoteCreateManyArgs>(
      args?: SelectSubset<T, VoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends VoteDeleteArgs>(
      args: SelectSubset<T, VoteDeleteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoteUpdateArgs>(
      args: SelectSubset<T, VoteUpdateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoteDeleteManyArgs>(
      args?: SelectSubset<T, VoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoteUpdateManyArgs>(
      args: SelectSubset<T, VoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends VoteUpsertArgs>(
      args: SelectSubset<T, VoteUpsertArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    voter<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Throw an Error if a Vote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vote to fetch.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Throw an Error if a Vote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vote to fetch.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     * 
    **/
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote findMany
   */
  export type VoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter, which Votes to fetch.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote create
   */
  export type VoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The data needed to create a Vote.
     * 
    **/
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }


  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs = {
    data: Enumerable<VoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vote update
   */
  export type VoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The data needed to update a Vote.
     * 
    **/
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs = {
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    where?: VoteWhereInput
  }


  /**
   * Vote upsert
   */
  export type VoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The filter to search for the Vote to update in case it exists.
     * 
    **/
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     * 
    **/
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }


  /**
   * Vote delete
   */
  export type VoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter which Vote to delete.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs = {
    where?: VoteWhereInput
  }


  /**
   * Vote without action
   */
  export type VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
  }



  /**
   * Model BerkasCandidate
   */


  export type AggregateBerkasCandidate = {
    _count: BerkasCandidateCountAggregateOutputType | null
    _min: BerkasCandidateMinAggregateOutputType | null
    _max: BerkasCandidateMaxAggregateOutputType | null
  }

  export type BerkasCandidateMinAggregateOutputType = {
    id: string | null
    nim: string | null
    password: string | null
    progress: ProgressBerkas | null
  }

  export type BerkasCandidateMaxAggregateOutputType = {
    id: string | null
    nim: string | null
    password: string | null
    progress: ProgressBerkas | null
  }

  export type BerkasCandidateCountAggregateOutputType = {
    id: number
    nim: number
    password: number
    progress: number
    _all: number
  }


  export type BerkasCandidateMinAggregateInputType = {
    id?: true
    nim?: true
    password?: true
    progress?: true
  }

  export type BerkasCandidateMaxAggregateInputType = {
    id?: true
    nim?: true
    password?: true
    progress?: true
  }

  export type BerkasCandidateCountAggregateInputType = {
    id?: true
    nim?: true
    password?: true
    progress?: true
    _all?: true
  }

  export type BerkasCandidateAggregateArgs = {
    /**
     * Filter which BerkasCandidate to aggregate.
     * 
    **/
    where?: BerkasCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasCandidates to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasCandidateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BerkasCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasCandidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasCandidates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BerkasCandidates
    **/
    _count?: true | BerkasCandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BerkasCandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BerkasCandidateMaxAggregateInputType
  }

  export type GetBerkasCandidateAggregateType<T extends BerkasCandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateBerkasCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBerkasCandidate[P]>
      : GetScalarType<T[P], AggregateBerkasCandidate[P]>
  }




  export type BerkasCandidateGroupByArgs = {
    where?: BerkasCandidateWhereInput
    orderBy?: Enumerable<BerkasCandidateOrderByWithAggregationInput>
    by: Array<BerkasCandidateScalarFieldEnum>
    having?: BerkasCandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BerkasCandidateCountAggregateInputType | true
    _min?: BerkasCandidateMinAggregateInputType
    _max?: BerkasCandidateMaxAggregateInputType
  }


  export type BerkasCandidateGroupByOutputType = {
    id: string
    nim: string
    password: string
    progress: ProgressBerkas
    _count: BerkasCandidateCountAggregateOutputType | null
    _min: BerkasCandidateMinAggregateOutputType | null
    _max: BerkasCandidateMaxAggregateOutputType | null
  }

  type GetBerkasCandidateGroupByPayload<T extends BerkasCandidateGroupByArgs> = Promise<
    Array<
      PickArray<BerkasCandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BerkasCandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BerkasCandidateGroupByOutputType[P]>
            : GetScalarType<T[P], BerkasCandidateGroupByOutputType[P]>
        }
      >
    >


  export type BerkasCandidateSelect = {
    id?: boolean
    nim?: boolean
    password?: boolean
    progress?: boolean
    BerkasUploaded?: boolean | BerkasUploadedFindManyArgs
    _count?: boolean | BerkasCandidateCountOutputTypeArgs
  }

  export type BerkasCandidateInclude = {
    BerkasUploaded?: boolean | BerkasUploadedFindManyArgs
    _count?: boolean | BerkasCandidateCountOutputTypeArgs
  }

  export type BerkasCandidateGetPayload<
    S extends boolean | null | undefined | BerkasCandidateArgs,
    U = keyof S
      > = S extends true
        ? BerkasCandidate
    : S extends undefined
    ? never
    : S extends BerkasCandidateArgs | BerkasCandidateFindManyArgs
    ?'include' extends U
    ? BerkasCandidate  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'BerkasUploaded'
        ? Array < BerkasUploadedGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? BerkasCandidateCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BerkasCandidate ?BerkasCandidate [P]
  : 
          P extends 'BerkasUploaded'
        ? Array < BerkasUploadedGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? BerkasCandidateCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : BerkasCandidate
  : BerkasCandidate


  type BerkasCandidateCountArgs = Merge<
    Omit<BerkasCandidateFindManyArgs, 'select' | 'include'> & {
      select?: BerkasCandidateCountAggregateInputType | true
    }
  >

  export interface BerkasCandidateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BerkasCandidate that matches the filter.
     * @param {BerkasCandidateFindUniqueArgs} args - Arguments to find a BerkasCandidate
     * @example
     * // Get one BerkasCandidate
     * const berkasCandidate = await prisma.berkasCandidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BerkasCandidateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BerkasCandidateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BerkasCandidate'> extends True ? CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate>, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T>>> : CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate | null >, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T> | null >>

    /**
     * Find the first BerkasCandidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCandidateFindFirstArgs} args - Arguments to find a BerkasCandidate
     * @example
     * // Get one BerkasCandidate
     * const berkasCandidate = await prisma.berkasCandidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BerkasCandidateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BerkasCandidateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BerkasCandidate'> extends True ? CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate>, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T>>> : CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate | null >, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T> | null >>

    /**
     * Find zero or more BerkasCandidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCandidateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BerkasCandidates
     * const berkasCandidates = await prisma.berkasCandidate.findMany()
     * 
     * // Get first 10 BerkasCandidates
     * const berkasCandidates = await prisma.berkasCandidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const berkasCandidateWithIdOnly = await prisma.berkasCandidate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BerkasCandidateFindManyArgs>(
      args?: SelectSubset<T, BerkasCandidateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BerkasCandidate>>, PrismaPromise<Array<BerkasCandidateGetPayload<T>>>>

    /**
     * Create a BerkasCandidate.
     * @param {BerkasCandidateCreateArgs} args - Arguments to create a BerkasCandidate.
     * @example
     * // Create one BerkasCandidate
     * const BerkasCandidate = await prisma.berkasCandidate.create({
     *   data: {
     *     // ... data to create a BerkasCandidate
     *   }
     * })
     * 
    **/
    create<T extends BerkasCandidateCreateArgs>(
      args: SelectSubset<T, BerkasCandidateCreateArgs>
    ): CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate>, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T>>>

    /**
     * Create many BerkasCandidates.
     *     @param {BerkasCandidateCreateManyArgs} args - Arguments to create many BerkasCandidates.
     *     @example
     *     // Create many BerkasCandidates
     *     const berkasCandidate = await prisma.berkasCandidate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BerkasCandidateCreateManyArgs>(
      args?: SelectSubset<T, BerkasCandidateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BerkasCandidate.
     * @param {BerkasCandidateDeleteArgs} args - Arguments to delete one BerkasCandidate.
     * @example
     * // Delete one BerkasCandidate
     * const BerkasCandidate = await prisma.berkasCandidate.delete({
     *   where: {
     *     // ... filter to delete one BerkasCandidate
     *   }
     * })
     * 
    **/
    delete<T extends BerkasCandidateDeleteArgs>(
      args: SelectSubset<T, BerkasCandidateDeleteArgs>
    ): CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate>, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T>>>

    /**
     * Update one BerkasCandidate.
     * @param {BerkasCandidateUpdateArgs} args - Arguments to update one BerkasCandidate.
     * @example
     * // Update one BerkasCandidate
     * const berkasCandidate = await prisma.berkasCandidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BerkasCandidateUpdateArgs>(
      args: SelectSubset<T, BerkasCandidateUpdateArgs>
    ): CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate>, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T>>>

    /**
     * Delete zero or more BerkasCandidates.
     * @param {BerkasCandidateDeleteManyArgs} args - Arguments to filter BerkasCandidates to delete.
     * @example
     * // Delete a few BerkasCandidates
     * const { count } = await prisma.berkasCandidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BerkasCandidateDeleteManyArgs>(
      args?: SelectSubset<T, BerkasCandidateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BerkasCandidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BerkasCandidates
     * const berkasCandidate = await prisma.berkasCandidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BerkasCandidateUpdateManyArgs>(
      args: SelectSubset<T, BerkasCandidateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BerkasCandidate.
     * @param {BerkasCandidateUpsertArgs} args - Arguments to update or create a BerkasCandidate.
     * @example
     * // Update or create a BerkasCandidate
     * const berkasCandidate = await prisma.berkasCandidate.upsert({
     *   create: {
     *     // ... data to create a BerkasCandidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BerkasCandidate we want to update
     *   }
     * })
    **/
    upsert<T extends BerkasCandidateUpsertArgs>(
      args: SelectSubset<T, BerkasCandidateUpsertArgs>
    ): CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate>, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T>>>

    /**
     * Count the number of BerkasCandidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCandidateCountArgs} args - Arguments to filter BerkasCandidates to count.
     * @example
     * // Count the number of BerkasCandidates
     * const count = await prisma.berkasCandidate.count({
     *   where: {
     *     // ... the filter for the BerkasCandidates we want to count
     *   }
     * })
    **/
    count<T extends BerkasCandidateCountArgs>(
      args?: Subset<T, BerkasCandidateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BerkasCandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BerkasCandidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BerkasCandidateAggregateArgs>(args: Subset<T, BerkasCandidateAggregateArgs>): PrismaPromise<GetBerkasCandidateAggregateType<T>>

    /**
     * Group by BerkasCandidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BerkasCandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BerkasCandidateGroupByArgs['orderBy'] }
        : { orderBy?: BerkasCandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BerkasCandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBerkasCandidateGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BerkasCandidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BerkasCandidateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    BerkasUploaded<T extends BerkasUploadedFindManyArgs = {}>(args?: Subset<T, BerkasUploadedFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BerkasUploaded>>, PrismaPromise<Array<BerkasUploadedGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BerkasCandidate findUnique
   */
  export type BerkasCandidateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * Throw an Error if a BerkasCandidate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BerkasCandidate to fetch.
     * 
    **/
    where: BerkasCandidateWhereUniqueInput
  }


  /**
   * BerkasCandidate findFirst
   */
  export type BerkasCandidateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * Throw an Error if a BerkasCandidate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BerkasCandidate to fetch.
     * 
    **/
    where?: BerkasCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasCandidates to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasCandidateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BerkasCandidates.
     * 
    **/
    cursor?: BerkasCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasCandidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasCandidates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BerkasCandidates.
     * 
    **/
    distinct?: Enumerable<BerkasCandidateScalarFieldEnum>
  }


  /**
   * BerkasCandidate findMany
   */
  export type BerkasCandidateFindManyArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * Filter, which BerkasCandidates to fetch.
     * 
    **/
    where?: BerkasCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasCandidates to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasCandidateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BerkasCandidates.
     * 
    **/
    cursor?: BerkasCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasCandidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasCandidates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BerkasCandidateScalarFieldEnum>
  }


  /**
   * BerkasCandidate create
   */
  export type BerkasCandidateCreateArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * The data needed to create a BerkasCandidate.
     * 
    **/
    data: XOR<BerkasCandidateCreateInput, BerkasCandidateUncheckedCreateInput>
  }


  /**
   * BerkasCandidate createMany
   */
  export type BerkasCandidateCreateManyArgs = {
    data: Enumerable<BerkasCandidateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BerkasCandidate update
   */
  export type BerkasCandidateUpdateArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * The data needed to update a BerkasCandidate.
     * 
    **/
    data: XOR<BerkasCandidateUpdateInput, BerkasCandidateUncheckedUpdateInput>
    /**
     * Choose, which BerkasCandidate to update.
     * 
    **/
    where: BerkasCandidateWhereUniqueInput
  }


  /**
   * BerkasCandidate updateMany
   */
  export type BerkasCandidateUpdateManyArgs = {
    data: XOR<BerkasCandidateUpdateManyMutationInput, BerkasCandidateUncheckedUpdateManyInput>
    where?: BerkasCandidateWhereInput
  }


  /**
   * BerkasCandidate upsert
   */
  export type BerkasCandidateUpsertArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * The filter to search for the BerkasCandidate to update in case it exists.
     * 
    **/
    where: BerkasCandidateWhereUniqueInput
    /**
     * In case the BerkasCandidate found by the `where` argument doesn't exist, create a new BerkasCandidate with this data.
     * 
    **/
    create: XOR<BerkasCandidateCreateInput, BerkasCandidateUncheckedCreateInput>
    /**
     * In case the BerkasCandidate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BerkasCandidateUpdateInput, BerkasCandidateUncheckedUpdateInput>
  }


  /**
   * BerkasCandidate delete
   */
  export type BerkasCandidateDeleteArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
    /**
     * Filter which BerkasCandidate to delete.
     * 
    **/
    where: BerkasCandidateWhereUniqueInput
  }


  /**
   * BerkasCandidate deleteMany
   */
  export type BerkasCandidateDeleteManyArgs = {
    where?: BerkasCandidateWhereInput
  }


  /**
   * BerkasCandidate without action
   */
  export type BerkasCandidateArgs = {
    /**
     * Select specific fields to fetch from the BerkasCandidate
     * 
    **/
    select?: BerkasCandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasCandidateInclude | null
  }



  /**
   * Model BerkasUploaded
   */


  export type AggregateBerkasUploaded = {
    _count: BerkasUploadedCountAggregateOutputType | null
    _avg: BerkasUploadedAvgAggregateOutputType | null
    _sum: BerkasUploadedSumAggregateOutputType | null
    _min: BerkasUploadedMinAggregateOutputType | null
    _max: BerkasUploadedMaxAggregateOutputType | null
  }

  export type BerkasUploadedAvgAggregateOutputType = {
    berkas_id: number | null
  }

  export type BerkasUploadedSumAggregateOutputType = {
    berkas_id: number | null
  }

  export type BerkasUploadedMinAggregateOutputType = {
    id: string | null
    berkas_id: number | null
    berkas_candidate_id: string | null
    file_url: string | null
  }

  export type BerkasUploadedMaxAggregateOutputType = {
    id: string | null
    berkas_id: number | null
    berkas_candidate_id: string | null
    file_url: string | null
  }

  export type BerkasUploadedCountAggregateOutputType = {
    id: number
    berkas_id: number
    berkas_candidate_id: number
    file_url: number
    _all: number
  }


  export type BerkasUploadedAvgAggregateInputType = {
    berkas_id?: true
  }

  export type BerkasUploadedSumAggregateInputType = {
    berkas_id?: true
  }

  export type BerkasUploadedMinAggregateInputType = {
    id?: true
    berkas_id?: true
    berkas_candidate_id?: true
    file_url?: true
  }

  export type BerkasUploadedMaxAggregateInputType = {
    id?: true
    berkas_id?: true
    berkas_candidate_id?: true
    file_url?: true
  }

  export type BerkasUploadedCountAggregateInputType = {
    id?: true
    berkas_id?: true
    berkas_candidate_id?: true
    file_url?: true
    _all?: true
  }

  export type BerkasUploadedAggregateArgs = {
    /**
     * Filter which BerkasUploaded to aggregate.
     * 
    **/
    where?: BerkasUploadedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasUploadeds to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasUploadedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BerkasUploadedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasUploadeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasUploadeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BerkasUploadeds
    **/
    _count?: true | BerkasUploadedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BerkasUploadedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BerkasUploadedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BerkasUploadedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BerkasUploadedMaxAggregateInputType
  }

  export type GetBerkasUploadedAggregateType<T extends BerkasUploadedAggregateArgs> = {
        [P in keyof T & keyof AggregateBerkasUploaded]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBerkasUploaded[P]>
      : GetScalarType<T[P], AggregateBerkasUploaded[P]>
  }




  export type BerkasUploadedGroupByArgs = {
    where?: BerkasUploadedWhereInput
    orderBy?: Enumerable<BerkasUploadedOrderByWithAggregationInput>
    by: Array<BerkasUploadedScalarFieldEnum>
    having?: BerkasUploadedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BerkasUploadedCountAggregateInputType | true
    _avg?: BerkasUploadedAvgAggregateInputType
    _sum?: BerkasUploadedSumAggregateInputType
    _min?: BerkasUploadedMinAggregateInputType
    _max?: BerkasUploadedMaxAggregateInputType
  }


  export type BerkasUploadedGroupByOutputType = {
    id: string
    berkas_id: number
    berkas_candidate_id: string
    file_url: string
    _count: BerkasUploadedCountAggregateOutputType | null
    _avg: BerkasUploadedAvgAggregateOutputType | null
    _sum: BerkasUploadedSumAggregateOutputType | null
    _min: BerkasUploadedMinAggregateOutputType | null
    _max: BerkasUploadedMaxAggregateOutputType | null
  }

  type GetBerkasUploadedGroupByPayload<T extends BerkasUploadedGroupByArgs> = Promise<
    Array<
      PickArray<BerkasUploadedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BerkasUploadedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BerkasUploadedGroupByOutputType[P]>
            : GetScalarType<T[P], BerkasUploadedGroupByOutputType[P]>
        }
      >
    >


  export type BerkasUploadedSelect = {
    id?: boolean
    berkas?: boolean | BerkasArgs
    berkas_id?: boolean
    berkas_candidate?: boolean | BerkasCandidateArgs
    berkas_candidate_id?: boolean
    file_url?: boolean
  }

  export type BerkasUploadedInclude = {
    berkas?: boolean | BerkasArgs
    berkas_candidate?: boolean | BerkasCandidateArgs
  }

  export type BerkasUploadedGetPayload<
    S extends boolean | null | undefined | BerkasUploadedArgs,
    U = keyof S
      > = S extends true
        ? BerkasUploaded
    : S extends undefined
    ? never
    : S extends BerkasUploadedArgs | BerkasUploadedFindManyArgs
    ?'include' extends U
    ? BerkasUploaded  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'berkas'
        ? BerkasGetPayload<S['include'][P]> :
        P extends 'berkas_candidate'
        ? BerkasCandidateGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BerkasUploaded ?BerkasUploaded [P]
  : 
          P extends 'berkas'
        ? BerkasGetPayload<S['select'][P]> :
        P extends 'berkas_candidate'
        ? BerkasCandidateGetPayload<S['select'][P]> : never
  } 
    : BerkasUploaded
  : BerkasUploaded


  type BerkasUploadedCountArgs = Merge<
    Omit<BerkasUploadedFindManyArgs, 'select' | 'include'> & {
      select?: BerkasUploadedCountAggregateInputType | true
    }
  >

  export interface BerkasUploadedDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BerkasUploaded that matches the filter.
     * @param {BerkasUploadedFindUniqueArgs} args - Arguments to find a BerkasUploaded
     * @example
     * // Get one BerkasUploaded
     * const berkasUploaded = await prisma.berkasUploaded.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BerkasUploadedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BerkasUploadedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BerkasUploaded'> extends True ? CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded>, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T>>> : CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded | null >, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T> | null >>

    /**
     * Find the first BerkasUploaded that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUploadedFindFirstArgs} args - Arguments to find a BerkasUploaded
     * @example
     * // Get one BerkasUploaded
     * const berkasUploaded = await prisma.berkasUploaded.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BerkasUploadedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BerkasUploadedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BerkasUploaded'> extends True ? CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded>, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T>>> : CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded | null >, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T> | null >>

    /**
     * Find zero or more BerkasUploadeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUploadedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BerkasUploadeds
     * const berkasUploadeds = await prisma.berkasUploaded.findMany()
     * 
     * // Get first 10 BerkasUploadeds
     * const berkasUploadeds = await prisma.berkasUploaded.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const berkasUploadedWithIdOnly = await prisma.berkasUploaded.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BerkasUploadedFindManyArgs>(
      args?: SelectSubset<T, BerkasUploadedFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BerkasUploaded>>, PrismaPromise<Array<BerkasUploadedGetPayload<T>>>>

    /**
     * Create a BerkasUploaded.
     * @param {BerkasUploadedCreateArgs} args - Arguments to create a BerkasUploaded.
     * @example
     * // Create one BerkasUploaded
     * const BerkasUploaded = await prisma.berkasUploaded.create({
     *   data: {
     *     // ... data to create a BerkasUploaded
     *   }
     * })
     * 
    **/
    create<T extends BerkasUploadedCreateArgs>(
      args: SelectSubset<T, BerkasUploadedCreateArgs>
    ): CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded>, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T>>>

    /**
     * Create many BerkasUploadeds.
     *     @param {BerkasUploadedCreateManyArgs} args - Arguments to create many BerkasUploadeds.
     *     @example
     *     // Create many BerkasUploadeds
     *     const berkasUploaded = await prisma.berkasUploaded.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BerkasUploadedCreateManyArgs>(
      args?: SelectSubset<T, BerkasUploadedCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BerkasUploaded.
     * @param {BerkasUploadedDeleteArgs} args - Arguments to delete one BerkasUploaded.
     * @example
     * // Delete one BerkasUploaded
     * const BerkasUploaded = await prisma.berkasUploaded.delete({
     *   where: {
     *     // ... filter to delete one BerkasUploaded
     *   }
     * })
     * 
    **/
    delete<T extends BerkasUploadedDeleteArgs>(
      args: SelectSubset<T, BerkasUploadedDeleteArgs>
    ): CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded>, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T>>>

    /**
     * Update one BerkasUploaded.
     * @param {BerkasUploadedUpdateArgs} args - Arguments to update one BerkasUploaded.
     * @example
     * // Update one BerkasUploaded
     * const berkasUploaded = await prisma.berkasUploaded.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BerkasUploadedUpdateArgs>(
      args: SelectSubset<T, BerkasUploadedUpdateArgs>
    ): CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded>, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T>>>

    /**
     * Delete zero or more BerkasUploadeds.
     * @param {BerkasUploadedDeleteManyArgs} args - Arguments to filter BerkasUploadeds to delete.
     * @example
     * // Delete a few BerkasUploadeds
     * const { count } = await prisma.berkasUploaded.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BerkasUploadedDeleteManyArgs>(
      args?: SelectSubset<T, BerkasUploadedDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BerkasUploadeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUploadedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BerkasUploadeds
     * const berkasUploaded = await prisma.berkasUploaded.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BerkasUploadedUpdateManyArgs>(
      args: SelectSubset<T, BerkasUploadedUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BerkasUploaded.
     * @param {BerkasUploadedUpsertArgs} args - Arguments to update or create a BerkasUploaded.
     * @example
     * // Update or create a BerkasUploaded
     * const berkasUploaded = await prisma.berkasUploaded.upsert({
     *   create: {
     *     // ... data to create a BerkasUploaded
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BerkasUploaded we want to update
     *   }
     * })
    **/
    upsert<T extends BerkasUploadedUpsertArgs>(
      args: SelectSubset<T, BerkasUploadedUpsertArgs>
    ): CheckSelect<T, Prisma__BerkasUploadedClient<BerkasUploaded>, Prisma__BerkasUploadedClient<BerkasUploadedGetPayload<T>>>

    /**
     * Count the number of BerkasUploadeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUploadedCountArgs} args - Arguments to filter BerkasUploadeds to count.
     * @example
     * // Count the number of BerkasUploadeds
     * const count = await prisma.berkasUploaded.count({
     *   where: {
     *     // ... the filter for the BerkasUploadeds we want to count
     *   }
     * })
    **/
    count<T extends BerkasUploadedCountArgs>(
      args?: Subset<T, BerkasUploadedCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BerkasUploadedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BerkasUploaded.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUploadedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BerkasUploadedAggregateArgs>(args: Subset<T, BerkasUploadedAggregateArgs>): PrismaPromise<GetBerkasUploadedAggregateType<T>>

    /**
     * Group by BerkasUploaded.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUploadedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BerkasUploadedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BerkasUploadedGroupByArgs['orderBy'] }
        : { orderBy?: BerkasUploadedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BerkasUploadedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBerkasUploadedGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BerkasUploaded.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BerkasUploadedClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    berkas<T extends BerkasArgs = {}>(args?: Subset<T, BerkasArgs>): CheckSelect<T, Prisma__BerkasClient<Berkas | null >, Prisma__BerkasClient<BerkasGetPayload<T> | null >>;

    berkas_candidate<T extends BerkasCandidateArgs = {}>(args?: Subset<T, BerkasCandidateArgs>): CheckSelect<T, Prisma__BerkasCandidateClient<BerkasCandidate | null >, Prisma__BerkasCandidateClient<BerkasCandidateGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BerkasUploaded findUnique
   */
  export type BerkasUploadedFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * Throw an Error if a BerkasUploaded can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BerkasUploaded to fetch.
     * 
    **/
    where: BerkasUploadedWhereUniqueInput
  }


  /**
   * BerkasUploaded findFirst
   */
  export type BerkasUploadedFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * Throw an Error if a BerkasUploaded can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BerkasUploaded to fetch.
     * 
    **/
    where?: BerkasUploadedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasUploadeds to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasUploadedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BerkasUploadeds.
     * 
    **/
    cursor?: BerkasUploadedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasUploadeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasUploadeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BerkasUploadeds.
     * 
    **/
    distinct?: Enumerable<BerkasUploadedScalarFieldEnum>
  }


  /**
   * BerkasUploaded findMany
   */
  export type BerkasUploadedFindManyArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * Filter, which BerkasUploadeds to fetch.
     * 
    **/
    where?: BerkasUploadedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasUploadeds to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasUploadedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BerkasUploadeds.
     * 
    **/
    cursor?: BerkasUploadedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasUploadeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasUploadeds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BerkasUploadedScalarFieldEnum>
  }


  /**
   * BerkasUploaded create
   */
  export type BerkasUploadedCreateArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * The data needed to create a BerkasUploaded.
     * 
    **/
    data: XOR<BerkasUploadedCreateInput, BerkasUploadedUncheckedCreateInput>
  }


  /**
   * BerkasUploaded createMany
   */
  export type BerkasUploadedCreateManyArgs = {
    data: Enumerable<BerkasUploadedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BerkasUploaded update
   */
  export type BerkasUploadedUpdateArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * The data needed to update a BerkasUploaded.
     * 
    **/
    data: XOR<BerkasUploadedUpdateInput, BerkasUploadedUncheckedUpdateInput>
    /**
     * Choose, which BerkasUploaded to update.
     * 
    **/
    where: BerkasUploadedWhereUniqueInput
  }


  /**
   * BerkasUploaded updateMany
   */
  export type BerkasUploadedUpdateManyArgs = {
    data: XOR<BerkasUploadedUpdateManyMutationInput, BerkasUploadedUncheckedUpdateManyInput>
    where?: BerkasUploadedWhereInput
  }


  /**
   * BerkasUploaded upsert
   */
  export type BerkasUploadedUpsertArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * The filter to search for the BerkasUploaded to update in case it exists.
     * 
    **/
    where: BerkasUploadedWhereUniqueInput
    /**
     * In case the BerkasUploaded found by the `where` argument doesn't exist, create a new BerkasUploaded with this data.
     * 
    **/
    create: XOR<BerkasUploadedCreateInput, BerkasUploadedUncheckedCreateInput>
    /**
     * In case the BerkasUploaded was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BerkasUploadedUpdateInput, BerkasUploadedUncheckedUpdateInput>
  }


  /**
   * BerkasUploaded delete
   */
  export type BerkasUploadedDeleteArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
    /**
     * Filter which BerkasUploaded to delete.
     * 
    **/
    where: BerkasUploadedWhereUniqueInput
  }


  /**
   * BerkasUploaded deleteMany
   */
  export type BerkasUploadedDeleteManyArgs = {
    where?: BerkasUploadedWhereInput
  }


  /**
   * BerkasUploaded without action
   */
  export type BerkasUploadedArgs = {
    /**
     * Select specific fields to fetch from the BerkasUploaded
     * 
    **/
    select?: BerkasUploadedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasUploadedInclude | null
  }



  /**
   * Model Berkas
   */


  export type AggregateBerkas = {
    _count: BerkasCountAggregateOutputType | null
    _avg: BerkasAvgAggregateOutputType | null
    _sum: BerkasSumAggregateOutputType | null
    _min: BerkasMinAggregateOutputType | null
    _max: BerkasMaxAggregateOutputType | null
  }

  export type BerkasAvgAggregateOutputType = {
    id: number | null
  }

  export type BerkasSumAggregateOutputType = {
    id: number | null
  }

  export type BerkasMinAggregateOutputType = {
    id: number | null
    nama: string | null
    jenis_berkas: JenisBerkas | null
  }

  export type BerkasMaxAggregateOutputType = {
    id: number | null
    nama: string | null
    jenis_berkas: JenisBerkas | null
  }

  export type BerkasCountAggregateOutputType = {
    id: number
    nama: number
    jenis_berkas: number
    _all: number
  }


  export type BerkasAvgAggregateInputType = {
    id?: true
  }

  export type BerkasSumAggregateInputType = {
    id?: true
  }

  export type BerkasMinAggregateInputType = {
    id?: true
    nama?: true
    jenis_berkas?: true
  }

  export type BerkasMaxAggregateInputType = {
    id?: true
    nama?: true
    jenis_berkas?: true
  }

  export type BerkasCountAggregateInputType = {
    id?: true
    nama?: true
    jenis_berkas?: true
    _all?: true
  }

  export type BerkasAggregateArgs = {
    /**
     * Filter which Berkas to aggregate.
     * 
    **/
    where?: BerkasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Berkas to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BerkasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Berkas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Berkas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Berkas
    **/
    _count?: true | BerkasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BerkasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BerkasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BerkasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BerkasMaxAggregateInputType
  }

  export type GetBerkasAggregateType<T extends BerkasAggregateArgs> = {
        [P in keyof T & keyof AggregateBerkas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBerkas[P]>
      : GetScalarType<T[P], AggregateBerkas[P]>
  }




  export type BerkasGroupByArgs = {
    where?: BerkasWhereInput
    orderBy?: Enumerable<BerkasOrderByWithAggregationInput>
    by: Array<BerkasScalarFieldEnum>
    having?: BerkasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BerkasCountAggregateInputType | true
    _avg?: BerkasAvgAggregateInputType
    _sum?: BerkasSumAggregateInputType
    _min?: BerkasMinAggregateInputType
    _max?: BerkasMaxAggregateInputType
  }


  export type BerkasGroupByOutputType = {
    id: number
    nama: string
    jenis_berkas: JenisBerkas
    _count: BerkasCountAggregateOutputType | null
    _avg: BerkasAvgAggregateOutputType | null
    _sum: BerkasSumAggregateOutputType | null
    _min: BerkasMinAggregateOutputType | null
    _max: BerkasMaxAggregateOutputType | null
  }

  type GetBerkasGroupByPayload<T extends BerkasGroupByArgs> = Promise<
    Array<
      PickArray<BerkasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BerkasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BerkasGroupByOutputType[P]>
            : GetScalarType<T[P], BerkasGroupByOutputType[P]>
        }
      >
    >


  export type BerkasSelect = {
    id?: boolean
    nama?: boolean
    jenis_berkas?: boolean
    BerkasUploaded?: boolean | BerkasUploadedFindManyArgs
    _count?: boolean | BerkasCountOutputTypeArgs
  }

  export type BerkasInclude = {
    BerkasUploaded?: boolean | BerkasUploadedFindManyArgs
    _count?: boolean | BerkasCountOutputTypeArgs
  }

  export type BerkasGetPayload<
    S extends boolean | null | undefined | BerkasArgs,
    U = keyof S
      > = S extends true
        ? Berkas
    : S extends undefined
    ? never
    : S extends BerkasArgs | BerkasFindManyArgs
    ?'include' extends U
    ? Berkas  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'BerkasUploaded'
        ? Array < BerkasUploadedGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? BerkasCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Berkas ?Berkas [P]
  : 
          P extends 'BerkasUploaded'
        ? Array < BerkasUploadedGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? BerkasCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Berkas
  : Berkas


  type BerkasCountArgs = Merge<
    Omit<BerkasFindManyArgs, 'select' | 'include'> & {
      select?: BerkasCountAggregateInputType | true
    }
  >

  export interface BerkasDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Berkas that matches the filter.
     * @param {BerkasFindUniqueArgs} args - Arguments to find a Berkas
     * @example
     * // Get one Berkas
     * const berkas = await prisma.berkas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BerkasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BerkasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Berkas'> extends True ? CheckSelect<T, Prisma__BerkasClient<Berkas>, Prisma__BerkasClient<BerkasGetPayload<T>>> : CheckSelect<T, Prisma__BerkasClient<Berkas | null >, Prisma__BerkasClient<BerkasGetPayload<T> | null >>

    /**
     * Find the first Berkas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasFindFirstArgs} args - Arguments to find a Berkas
     * @example
     * // Get one Berkas
     * const berkas = await prisma.berkas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BerkasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BerkasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Berkas'> extends True ? CheckSelect<T, Prisma__BerkasClient<Berkas>, Prisma__BerkasClient<BerkasGetPayload<T>>> : CheckSelect<T, Prisma__BerkasClient<Berkas | null >, Prisma__BerkasClient<BerkasGetPayload<T> | null >>

    /**
     * Find zero or more Berkas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Berkas
     * const berkas = await prisma.berkas.findMany()
     * 
     * // Get first 10 Berkas
     * const berkas = await prisma.berkas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const berkasWithIdOnly = await prisma.berkas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BerkasFindManyArgs>(
      args?: SelectSubset<T, BerkasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Berkas>>, PrismaPromise<Array<BerkasGetPayload<T>>>>

    /**
     * Create a Berkas.
     * @param {BerkasCreateArgs} args - Arguments to create a Berkas.
     * @example
     * // Create one Berkas
     * const Berkas = await prisma.berkas.create({
     *   data: {
     *     // ... data to create a Berkas
     *   }
     * })
     * 
    **/
    create<T extends BerkasCreateArgs>(
      args: SelectSubset<T, BerkasCreateArgs>
    ): CheckSelect<T, Prisma__BerkasClient<Berkas>, Prisma__BerkasClient<BerkasGetPayload<T>>>

    /**
     * Create many Berkas.
     *     @param {BerkasCreateManyArgs} args - Arguments to create many Berkas.
     *     @example
     *     // Create many Berkas
     *     const berkas = await prisma.berkas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BerkasCreateManyArgs>(
      args?: SelectSubset<T, BerkasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Berkas.
     * @param {BerkasDeleteArgs} args - Arguments to delete one Berkas.
     * @example
     * // Delete one Berkas
     * const Berkas = await prisma.berkas.delete({
     *   where: {
     *     // ... filter to delete one Berkas
     *   }
     * })
     * 
    **/
    delete<T extends BerkasDeleteArgs>(
      args: SelectSubset<T, BerkasDeleteArgs>
    ): CheckSelect<T, Prisma__BerkasClient<Berkas>, Prisma__BerkasClient<BerkasGetPayload<T>>>

    /**
     * Update one Berkas.
     * @param {BerkasUpdateArgs} args - Arguments to update one Berkas.
     * @example
     * // Update one Berkas
     * const berkas = await prisma.berkas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BerkasUpdateArgs>(
      args: SelectSubset<T, BerkasUpdateArgs>
    ): CheckSelect<T, Prisma__BerkasClient<Berkas>, Prisma__BerkasClient<BerkasGetPayload<T>>>

    /**
     * Delete zero or more Berkas.
     * @param {BerkasDeleteManyArgs} args - Arguments to filter Berkas to delete.
     * @example
     * // Delete a few Berkas
     * const { count } = await prisma.berkas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BerkasDeleteManyArgs>(
      args?: SelectSubset<T, BerkasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Berkas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Berkas
     * const berkas = await prisma.berkas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BerkasUpdateManyArgs>(
      args: SelectSubset<T, BerkasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Berkas.
     * @param {BerkasUpsertArgs} args - Arguments to update or create a Berkas.
     * @example
     * // Update or create a Berkas
     * const berkas = await prisma.berkas.upsert({
     *   create: {
     *     // ... data to create a Berkas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Berkas we want to update
     *   }
     * })
    **/
    upsert<T extends BerkasUpsertArgs>(
      args: SelectSubset<T, BerkasUpsertArgs>
    ): CheckSelect<T, Prisma__BerkasClient<Berkas>, Prisma__BerkasClient<BerkasGetPayload<T>>>

    /**
     * Count the number of Berkas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasCountArgs} args - Arguments to filter Berkas to count.
     * @example
     * // Count the number of Berkas
     * const count = await prisma.berkas.count({
     *   where: {
     *     // ... the filter for the Berkas we want to count
     *   }
     * })
    **/
    count<T extends BerkasCountArgs>(
      args?: Subset<T, BerkasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BerkasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Berkas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BerkasAggregateArgs>(args: Subset<T, BerkasAggregateArgs>): PrismaPromise<GetBerkasAggregateType<T>>

    /**
     * Group by Berkas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BerkasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BerkasGroupByArgs['orderBy'] }
        : { orderBy?: BerkasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BerkasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBerkasGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Berkas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BerkasClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    BerkasUploaded<T extends BerkasUploadedFindManyArgs = {}>(args?: Subset<T, BerkasUploadedFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BerkasUploaded>>, PrismaPromise<Array<BerkasUploadedGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Berkas findUnique
   */
  export type BerkasFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * Throw an Error if a Berkas can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Berkas to fetch.
     * 
    **/
    where: BerkasWhereUniqueInput
  }


  /**
   * Berkas findFirst
   */
  export type BerkasFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * Throw an Error if a Berkas can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Berkas to fetch.
     * 
    **/
    where?: BerkasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Berkas to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Berkas.
     * 
    **/
    cursor?: BerkasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Berkas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Berkas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Berkas.
     * 
    **/
    distinct?: Enumerable<BerkasScalarFieldEnum>
  }


  /**
   * Berkas findMany
   */
  export type BerkasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * Filter, which Berkas to fetch.
     * 
    **/
    where?: BerkasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Berkas to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Berkas.
     * 
    **/
    cursor?: BerkasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Berkas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Berkas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BerkasScalarFieldEnum>
  }


  /**
   * Berkas create
   */
  export type BerkasCreateArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * The data needed to create a Berkas.
     * 
    **/
    data: XOR<BerkasCreateInput, BerkasUncheckedCreateInput>
  }


  /**
   * Berkas createMany
   */
  export type BerkasCreateManyArgs = {
    data: Enumerable<BerkasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Berkas update
   */
  export type BerkasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * The data needed to update a Berkas.
     * 
    **/
    data: XOR<BerkasUpdateInput, BerkasUncheckedUpdateInput>
    /**
     * Choose, which Berkas to update.
     * 
    **/
    where: BerkasWhereUniqueInput
  }


  /**
   * Berkas updateMany
   */
  export type BerkasUpdateManyArgs = {
    data: XOR<BerkasUpdateManyMutationInput, BerkasUncheckedUpdateManyInput>
    where?: BerkasWhereInput
  }


  /**
   * Berkas upsert
   */
  export type BerkasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * The filter to search for the Berkas to update in case it exists.
     * 
    **/
    where: BerkasWhereUniqueInput
    /**
     * In case the Berkas found by the `where` argument doesn't exist, create a new Berkas with this data.
     * 
    **/
    create: XOR<BerkasCreateInput, BerkasUncheckedCreateInput>
    /**
     * In case the Berkas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BerkasUpdateInput, BerkasUncheckedUpdateInput>
  }


  /**
   * Berkas delete
   */
  export type BerkasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
    /**
     * Filter which Berkas to delete.
     * 
    **/
    where: BerkasWhereUniqueInput
  }


  /**
   * Berkas deleteMany
   */
  export type BerkasDeleteManyArgs = {
    where?: BerkasWhereInput
  }


  /**
   * Berkas without action
   */
  export type BerkasArgs = {
    /**
     * Select specific fields to fetch from the Berkas
     * 
    **/
    select?: BerkasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BerkasInclude | null
  }



  /**
   * Model BerkasAdmin
   */


  export type AggregateBerkasAdmin = {
    _count: BerkasAdminCountAggregateOutputType | null
    _min: BerkasAdminMinAggregateOutputType | null
    _max: BerkasAdminMaxAggregateOutputType | null
  }

  export type BerkasAdminMinAggregateOutputType = {
    id: string | null
    nim: string | null
    password: string | null
  }

  export type BerkasAdminMaxAggregateOutputType = {
    id: string | null
    nim: string | null
    password: string | null
  }

  export type BerkasAdminCountAggregateOutputType = {
    id: number
    nim: number
    password: number
    _all: number
  }


  export type BerkasAdminMinAggregateInputType = {
    id?: true
    nim?: true
    password?: true
  }

  export type BerkasAdminMaxAggregateInputType = {
    id?: true
    nim?: true
    password?: true
  }

  export type BerkasAdminCountAggregateInputType = {
    id?: true
    nim?: true
    password?: true
    _all?: true
  }

  export type BerkasAdminAggregateArgs = {
    /**
     * Filter which BerkasAdmin to aggregate.
     * 
    **/
    where?: BerkasAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasAdmins to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BerkasAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasAdmins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasAdmins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BerkasAdmins
    **/
    _count?: true | BerkasAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BerkasAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BerkasAdminMaxAggregateInputType
  }

  export type GetBerkasAdminAggregateType<T extends BerkasAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateBerkasAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBerkasAdmin[P]>
      : GetScalarType<T[P], AggregateBerkasAdmin[P]>
  }




  export type BerkasAdminGroupByArgs = {
    where?: BerkasAdminWhereInput
    orderBy?: Enumerable<BerkasAdminOrderByWithAggregationInput>
    by: Array<BerkasAdminScalarFieldEnum>
    having?: BerkasAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BerkasAdminCountAggregateInputType | true
    _min?: BerkasAdminMinAggregateInputType
    _max?: BerkasAdminMaxAggregateInputType
  }


  export type BerkasAdminGroupByOutputType = {
    id: string
    nim: string
    password: string
    _count: BerkasAdminCountAggregateOutputType | null
    _min: BerkasAdminMinAggregateOutputType | null
    _max: BerkasAdminMaxAggregateOutputType | null
  }

  type GetBerkasAdminGroupByPayload<T extends BerkasAdminGroupByArgs> = Promise<
    Array<
      PickArray<BerkasAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BerkasAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BerkasAdminGroupByOutputType[P]>
            : GetScalarType<T[P], BerkasAdminGroupByOutputType[P]>
        }
      >
    >


  export type BerkasAdminSelect = {
    id?: boolean
    nim?: boolean
    password?: boolean
  }

  export type BerkasAdminGetPayload<
    S extends boolean | null | undefined | BerkasAdminArgs,
    U = keyof S
      > = S extends true
        ? BerkasAdmin
    : S extends undefined
    ? never
    : S extends BerkasAdminArgs | BerkasAdminFindManyArgs
    ?'include' extends U
    ? BerkasAdmin 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BerkasAdmin ?BerkasAdmin [P]
  : 
     never
  } 
    : BerkasAdmin
  : BerkasAdmin


  type BerkasAdminCountArgs = Merge<
    Omit<BerkasAdminFindManyArgs, 'select' | 'include'> & {
      select?: BerkasAdminCountAggregateInputType | true
    }
  >

  export interface BerkasAdminDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BerkasAdmin that matches the filter.
     * @param {BerkasAdminFindUniqueArgs} args - Arguments to find a BerkasAdmin
     * @example
     * // Get one BerkasAdmin
     * const berkasAdmin = await prisma.berkasAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BerkasAdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BerkasAdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BerkasAdmin'> extends True ? CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin>, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T>>> : CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin | null >, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T> | null >>

    /**
     * Find the first BerkasAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAdminFindFirstArgs} args - Arguments to find a BerkasAdmin
     * @example
     * // Get one BerkasAdmin
     * const berkasAdmin = await prisma.berkasAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BerkasAdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BerkasAdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BerkasAdmin'> extends True ? CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin>, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T>>> : CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin | null >, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T> | null >>

    /**
     * Find zero or more BerkasAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BerkasAdmins
     * const berkasAdmins = await prisma.berkasAdmin.findMany()
     * 
     * // Get first 10 BerkasAdmins
     * const berkasAdmins = await prisma.berkasAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const berkasAdminWithIdOnly = await prisma.berkasAdmin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BerkasAdminFindManyArgs>(
      args?: SelectSubset<T, BerkasAdminFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BerkasAdmin>>, PrismaPromise<Array<BerkasAdminGetPayload<T>>>>

    /**
     * Create a BerkasAdmin.
     * @param {BerkasAdminCreateArgs} args - Arguments to create a BerkasAdmin.
     * @example
     * // Create one BerkasAdmin
     * const BerkasAdmin = await prisma.berkasAdmin.create({
     *   data: {
     *     // ... data to create a BerkasAdmin
     *   }
     * })
     * 
    **/
    create<T extends BerkasAdminCreateArgs>(
      args: SelectSubset<T, BerkasAdminCreateArgs>
    ): CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin>, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T>>>

    /**
     * Create many BerkasAdmins.
     *     @param {BerkasAdminCreateManyArgs} args - Arguments to create many BerkasAdmins.
     *     @example
     *     // Create many BerkasAdmins
     *     const berkasAdmin = await prisma.berkasAdmin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BerkasAdminCreateManyArgs>(
      args?: SelectSubset<T, BerkasAdminCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BerkasAdmin.
     * @param {BerkasAdminDeleteArgs} args - Arguments to delete one BerkasAdmin.
     * @example
     * // Delete one BerkasAdmin
     * const BerkasAdmin = await prisma.berkasAdmin.delete({
     *   where: {
     *     // ... filter to delete one BerkasAdmin
     *   }
     * })
     * 
    **/
    delete<T extends BerkasAdminDeleteArgs>(
      args: SelectSubset<T, BerkasAdminDeleteArgs>
    ): CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin>, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T>>>

    /**
     * Update one BerkasAdmin.
     * @param {BerkasAdminUpdateArgs} args - Arguments to update one BerkasAdmin.
     * @example
     * // Update one BerkasAdmin
     * const berkasAdmin = await prisma.berkasAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BerkasAdminUpdateArgs>(
      args: SelectSubset<T, BerkasAdminUpdateArgs>
    ): CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin>, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T>>>

    /**
     * Delete zero or more BerkasAdmins.
     * @param {BerkasAdminDeleteManyArgs} args - Arguments to filter BerkasAdmins to delete.
     * @example
     * // Delete a few BerkasAdmins
     * const { count } = await prisma.berkasAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BerkasAdminDeleteManyArgs>(
      args?: SelectSubset<T, BerkasAdminDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BerkasAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BerkasAdmins
     * const berkasAdmin = await prisma.berkasAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BerkasAdminUpdateManyArgs>(
      args: SelectSubset<T, BerkasAdminUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BerkasAdmin.
     * @param {BerkasAdminUpsertArgs} args - Arguments to update or create a BerkasAdmin.
     * @example
     * // Update or create a BerkasAdmin
     * const berkasAdmin = await prisma.berkasAdmin.upsert({
     *   create: {
     *     // ... data to create a BerkasAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BerkasAdmin we want to update
     *   }
     * })
    **/
    upsert<T extends BerkasAdminUpsertArgs>(
      args: SelectSubset<T, BerkasAdminUpsertArgs>
    ): CheckSelect<T, Prisma__BerkasAdminClient<BerkasAdmin>, Prisma__BerkasAdminClient<BerkasAdminGetPayload<T>>>

    /**
     * Count the number of BerkasAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAdminCountArgs} args - Arguments to filter BerkasAdmins to count.
     * @example
     * // Count the number of BerkasAdmins
     * const count = await prisma.berkasAdmin.count({
     *   where: {
     *     // ... the filter for the BerkasAdmins we want to count
     *   }
     * })
    **/
    count<T extends BerkasAdminCountArgs>(
      args?: Subset<T, BerkasAdminCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BerkasAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BerkasAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BerkasAdminAggregateArgs>(args: Subset<T, BerkasAdminAggregateArgs>): PrismaPromise<GetBerkasAdminAggregateType<T>>

    /**
     * Group by BerkasAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BerkasAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BerkasAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BerkasAdminGroupByArgs['orderBy'] }
        : { orderBy?: BerkasAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BerkasAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBerkasAdminGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BerkasAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BerkasAdminClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BerkasAdmin findUnique
   */
  export type BerkasAdminFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * Throw an Error if a BerkasAdmin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BerkasAdmin to fetch.
     * 
    **/
    where: BerkasAdminWhereUniqueInput
  }


  /**
   * BerkasAdmin findFirst
   */
  export type BerkasAdminFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * Throw an Error if a BerkasAdmin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BerkasAdmin to fetch.
     * 
    **/
    where?: BerkasAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasAdmins to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BerkasAdmins.
     * 
    **/
    cursor?: BerkasAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasAdmins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasAdmins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BerkasAdmins.
     * 
    **/
    distinct?: Enumerable<BerkasAdminScalarFieldEnum>
  }


  /**
   * BerkasAdmin findMany
   */
  export type BerkasAdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * Filter, which BerkasAdmins to fetch.
     * 
    **/
    where?: BerkasAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BerkasAdmins to fetch.
     * 
    **/
    orderBy?: Enumerable<BerkasAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BerkasAdmins.
     * 
    **/
    cursor?: BerkasAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BerkasAdmins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BerkasAdmins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BerkasAdminScalarFieldEnum>
  }


  /**
   * BerkasAdmin create
   */
  export type BerkasAdminCreateArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * The data needed to create a BerkasAdmin.
     * 
    **/
    data: XOR<BerkasAdminCreateInput, BerkasAdminUncheckedCreateInput>
  }


  /**
   * BerkasAdmin createMany
   */
  export type BerkasAdminCreateManyArgs = {
    data: Enumerable<BerkasAdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BerkasAdmin update
   */
  export type BerkasAdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * The data needed to update a BerkasAdmin.
     * 
    **/
    data: XOR<BerkasAdminUpdateInput, BerkasAdminUncheckedUpdateInput>
    /**
     * Choose, which BerkasAdmin to update.
     * 
    **/
    where: BerkasAdminWhereUniqueInput
  }


  /**
   * BerkasAdmin updateMany
   */
  export type BerkasAdminUpdateManyArgs = {
    data: XOR<BerkasAdminUpdateManyMutationInput, BerkasAdminUncheckedUpdateManyInput>
    where?: BerkasAdminWhereInput
  }


  /**
   * BerkasAdmin upsert
   */
  export type BerkasAdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * The filter to search for the BerkasAdmin to update in case it exists.
     * 
    **/
    where: BerkasAdminWhereUniqueInput
    /**
     * In case the BerkasAdmin found by the `where` argument doesn't exist, create a new BerkasAdmin with this data.
     * 
    **/
    create: XOR<BerkasAdminCreateInput, BerkasAdminUncheckedCreateInput>
    /**
     * In case the BerkasAdmin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BerkasAdminUpdateInput, BerkasAdminUncheckedUpdateInput>
  }


  /**
   * BerkasAdmin delete
   */
  export type BerkasAdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
    /**
     * Filter which BerkasAdmin to delete.
     * 
    **/
    where: BerkasAdminWhereUniqueInput
  }


  /**
   * BerkasAdmin deleteMany
   */
  export type BerkasAdminDeleteManyArgs = {
    where?: BerkasAdminWhereInput
  }


  /**
   * BerkasAdmin without action
   */
  export type BerkasAdminArgs = {
    /**
     * Select specific fields to fetch from the BerkasAdmin
     * 
    **/
    select?: BerkasAdminSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    nim: 'nim',
    email_itb: 'email_itb',
    email_non_itb: 'email_non_itb',
    long_name: 'long_name',
    short_name: 'short_name',
    fakultas: 'fakultas',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    account_id: 'account_id'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const ChallengeScalarFieldEnum: {
    id: 'id',
    sender_id: 'sender_id',
    candidate_id: 'candidate_id',
    payload: 'payload',
    progress: 'progress',
    created_at: 'created_at'
  };

  export type ChallengeScalarFieldEnum = (typeof ChallengeScalarFieldEnum)[keyof typeof ChallengeScalarFieldEnum]


  export const ChallengeAnswerScalarFieldEnum: {
    id: 'id',
    challenge_id: 'challenge_id',
    answer: 'answer',
    created_at: 'created_at'
  };

  export type ChallengeAnswerScalarFieldEnum = (typeof ChallengeAnswerScalarFieldEnum)[keyof typeof ChallengeAnswerScalarFieldEnum]


  export const PelanggaranScalarFieldEnum: {
    id: 'id',
    sender_id: 'sender_id',
    candidate_id: 'candidate_id',
    keterangan: 'keterangan',
    bukti_url: 'bukti_url',
    created_at: 'created_at'
  };

  export type PelanggaranScalarFieldEnum = (typeof PelanggaranScalarFieldEnum)[keyof typeof PelanggaranScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    voter_id: 'voter_id',
    candidate_id: 'candidate_id',
    created_at: 'created_at'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const BerkasCandidateScalarFieldEnum: {
    id: 'id',
    nim: 'nim',
    password: 'password',
    progress: 'progress'
  };

  export type BerkasCandidateScalarFieldEnum = (typeof BerkasCandidateScalarFieldEnum)[keyof typeof BerkasCandidateScalarFieldEnum]


  export const BerkasUploadedScalarFieldEnum: {
    id: 'id',
    berkas_id: 'berkas_id',
    berkas_candidate_id: 'berkas_candidate_id',
    file_url: 'file_url'
  };

  export type BerkasUploadedScalarFieldEnum = (typeof BerkasUploadedScalarFieldEnum)[keyof typeof BerkasUploadedScalarFieldEnum]


  export const BerkasScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    jenis_berkas: 'jenis_berkas'
  };

  export type BerkasScalarFieldEnum = (typeof BerkasScalarFieldEnum)[keyof typeof BerkasScalarFieldEnum]


  export const BerkasAdminScalarFieldEnum: {
    id: 'id',
    nim: 'nim',
    password: 'password'
  };

  export type BerkasAdminScalarFieldEnum = (typeof BerkasAdminScalarFieldEnum)[keyof typeof BerkasAdminScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    nim?: StringFilter | string
    email_itb?: StringFilter | string
    email_non_itb?: StringFilter | string
    long_name?: StringFilter | string
    short_name?: StringFilter | string
    fakultas?: StringFilter | string
    role?: EnumRoleFilter | Role
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput> | null
    Challenge?: ChallengeListRelationFilter
    Pelanggaran?: PelanggaranListRelationFilter
    Vote?: VoteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nim?: SortOrder
    email_itb?: SortOrder
    email_non_itb?: SortOrder
    long_name?: SortOrder
    short_name?: SortOrder
    fakultas?: SortOrder
    role?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
    Challenge?: ChallengeOrderByRelationAggregateInput
    Pelanggaran?: PelanggaranOrderByRelationAggregateInput
    Vote?: VoteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    nim?: string
    email_itb?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nim?: SortOrder
    email_itb?: SortOrder
    email_non_itb?: SortOrder
    long_name?: SortOrder
    short_name?: SortOrder
    fakultas?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nim?: StringWithAggregatesFilter | string
    email_itb?: StringWithAggregatesFilter | string
    email_non_itb?: StringWithAggregatesFilter | string
    long_name?: StringWithAggregatesFilter | string
    short_name?: StringWithAggregatesFilter | string
    fakultas?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
  }

  export type CandidateWhereInput = {
    AND?: Enumerable<CandidateWhereInput>
    OR?: Enumerable<CandidateWhereInput>
    NOT?: Enumerable<CandidateWhereInput>
    id?: StringFilter | string
    account?: XOR<UserRelationFilter, UserWhereInput>
    account_id?: StringFilter | string
    Challenge?: ChallengeListRelationFilter
    Pelanggaran?: PelanggaranListRelationFilter
    Vote?: VoteListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    id?: SortOrder
    account?: UserOrderByWithRelationInput
    account_id?: SortOrder
    Challenge?: ChallengeOrderByRelationAggregateInput
    Pelanggaran?: PelanggaranOrderByRelationAggregateInput
    Vote?: VoteOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = {
    id?: string
    account_id?: string
  }

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    account_id?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidateScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidateScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    account_id?: StringWithAggregatesFilter | string
  }

  export type ChallengeWhereInput = {
    AND?: Enumerable<ChallengeWhereInput>
    OR?: Enumerable<ChallengeWhereInput>
    NOT?: Enumerable<ChallengeWhereInput>
    id?: StringFilter | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    sender_id?: StringFilter | string
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    candidate_id?: StringFilter | string
    payload?: StringFilter | string
    progress?: EnumProgressFilter | Progress
    created_at?: DateTimeFilter | Date | string
    challenge_answer?: XOR<ChallengeAnswerRelationFilter, ChallengeAnswerWhereInput> | null
  }

  export type ChallengeOrderByWithRelationInput = {
    id?: SortOrder
    sender?: UserOrderByWithRelationInput
    sender_id?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
    candidate_id?: SortOrder
    payload?: SortOrder
    progress?: SortOrder
    created_at?: SortOrder
    challenge_answer?: ChallengeAnswerOrderByWithRelationInput
  }

  export type ChallengeWhereUniqueInput = {
    id?: string
  }

  export type ChallengeOrderByWithAggregationInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    payload?: SortOrder
    progress?: SortOrder
    created_at?: SortOrder
    _count?: ChallengeCountOrderByAggregateInput
    _max?: ChallengeMaxOrderByAggregateInput
    _min?: ChallengeMinOrderByAggregateInput
  }

  export type ChallengeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChallengeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChallengeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChallengeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sender_id?: StringWithAggregatesFilter | string
    candidate_id?: StringWithAggregatesFilter | string
    payload?: StringWithAggregatesFilter | string
    progress?: EnumProgressWithAggregatesFilter | Progress
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ChallengeAnswerWhereInput = {
    AND?: Enumerable<ChallengeAnswerWhereInput>
    OR?: Enumerable<ChallengeAnswerWhereInput>
    NOT?: Enumerable<ChallengeAnswerWhereInput>
    id?: StringFilter | string
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
    challenge_id?: StringFilter | string
    answer?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type ChallengeAnswerOrderByWithRelationInput = {
    id?: SortOrder
    challenge?: ChallengeOrderByWithRelationInput
    challenge_id?: SortOrder
    answer?: SortOrder
    created_at?: SortOrder
  }

  export type ChallengeAnswerWhereUniqueInput = {
    id?: string
    challenge_id?: string
  }

  export type ChallengeAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    challenge_id?: SortOrder
    answer?: SortOrder
    created_at?: SortOrder
    _count?: ChallengeAnswerCountOrderByAggregateInput
    _max?: ChallengeAnswerMaxOrderByAggregateInput
    _min?: ChallengeAnswerMinOrderByAggregateInput
  }

  export type ChallengeAnswerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChallengeAnswerScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChallengeAnswerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChallengeAnswerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    challenge_id?: StringWithAggregatesFilter | string
    answer?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PelanggaranWhereInput = {
    AND?: Enumerable<PelanggaranWhereInput>
    OR?: Enumerable<PelanggaranWhereInput>
    NOT?: Enumerable<PelanggaranWhereInput>
    id?: StringFilter | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    sender_id?: StringFilter | string
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    candidate_id?: StringFilter | string
    keterangan?: StringFilter | string
    bukti_url?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type PelanggaranOrderByWithRelationInput = {
    id?: SortOrder
    sender?: UserOrderByWithRelationInput
    sender_id?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
    candidate_id?: SortOrder
    keterangan?: SortOrder
    bukti_url?: SortOrder
    created_at?: SortOrder
  }

  export type PelanggaranWhereUniqueInput = {
    id?: string
  }

  export type PelanggaranOrderByWithAggregationInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    keterangan?: SortOrder
    bukti_url?: SortOrder
    created_at?: SortOrder
    _count?: PelanggaranCountOrderByAggregateInput
    _max?: PelanggaranMaxOrderByAggregateInput
    _min?: PelanggaranMinOrderByAggregateInput
  }

  export type PelanggaranScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PelanggaranScalarWhereWithAggregatesInput>
    OR?: Enumerable<PelanggaranScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PelanggaranScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sender_id?: StringWithAggregatesFilter | string
    candidate_id?: StringWithAggregatesFilter | string
    keterangan?: StringWithAggregatesFilter | string
    bukti_url?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VoteWhereInput = {
    AND?: Enumerable<VoteWhereInput>
    OR?: Enumerable<VoteWhereInput>
    NOT?: Enumerable<VoteWhereInput>
    id?: StringFilter | string
    voter?: XOR<UserRelationFilter, UserWhereInput>
    voter_id?: StringFilter | string
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    candidate_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type VoteOrderByWithRelationInput = {
    id?: SortOrder
    voter?: UserOrderByWithRelationInput
    voter_id?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
    candidate_id?: SortOrder
    created_at?: SortOrder
  }

  export type VoteWhereUniqueInput = {
    id?: string
    voter_id?: string
  }

  export type VoteOrderByWithAggregationInput = {
    id?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
    created_at?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<VoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VoteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    voter_id?: StringWithAggregatesFilter | string
    candidate_id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BerkasCandidateWhereInput = {
    AND?: Enumerable<BerkasCandidateWhereInput>
    OR?: Enumerable<BerkasCandidateWhereInput>
    NOT?: Enumerable<BerkasCandidateWhereInput>
    id?: StringFilter | string
    nim?: StringFilter | string
    password?: StringFilter | string
    progress?: EnumProgressBerkasFilter | ProgressBerkas
    BerkasUploaded?: BerkasUploadedListRelationFilter
  }

  export type BerkasCandidateOrderByWithRelationInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
    progress?: SortOrder
    BerkasUploaded?: BerkasUploadedOrderByRelationAggregateInput
  }

  export type BerkasCandidateWhereUniqueInput = {
    id?: string
  }

  export type BerkasCandidateOrderByWithAggregationInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
    progress?: SortOrder
    _count?: BerkasCandidateCountOrderByAggregateInput
    _max?: BerkasCandidateMaxOrderByAggregateInput
    _min?: BerkasCandidateMinOrderByAggregateInput
  }

  export type BerkasCandidateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BerkasCandidateScalarWhereWithAggregatesInput>
    OR?: Enumerable<BerkasCandidateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BerkasCandidateScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nim?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    progress?: EnumProgressBerkasWithAggregatesFilter | ProgressBerkas
  }

  export type BerkasUploadedWhereInput = {
    AND?: Enumerable<BerkasUploadedWhereInput>
    OR?: Enumerable<BerkasUploadedWhereInput>
    NOT?: Enumerable<BerkasUploadedWhereInput>
    id?: StringFilter | string
    berkas?: XOR<BerkasRelationFilter, BerkasWhereInput>
    berkas_id?: IntFilter | number
    berkas_candidate?: XOR<BerkasCandidateRelationFilter, BerkasCandidateWhereInput>
    berkas_candidate_id?: StringFilter | string
    file_url?: StringFilter | string
  }

  export type BerkasUploadedOrderByWithRelationInput = {
    id?: SortOrder
    berkas?: BerkasOrderByWithRelationInput
    berkas_id?: SortOrder
    berkas_candidate?: BerkasCandidateOrderByWithRelationInput
    berkas_candidate_id?: SortOrder
    file_url?: SortOrder
  }

  export type BerkasUploadedWhereUniqueInput = {
    id?: string
  }

  export type BerkasUploadedOrderByWithAggregationInput = {
    id?: SortOrder
    berkas_id?: SortOrder
    berkas_candidate_id?: SortOrder
    file_url?: SortOrder
    _count?: BerkasUploadedCountOrderByAggregateInput
    _avg?: BerkasUploadedAvgOrderByAggregateInput
    _max?: BerkasUploadedMaxOrderByAggregateInput
    _min?: BerkasUploadedMinOrderByAggregateInput
    _sum?: BerkasUploadedSumOrderByAggregateInput
  }

  export type BerkasUploadedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BerkasUploadedScalarWhereWithAggregatesInput>
    OR?: Enumerable<BerkasUploadedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BerkasUploadedScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    berkas_id?: IntWithAggregatesFilter | number
    berkas_candidate_id?: StringWithAggregatesFilter | string
    file_url?: StringWithAggregatesFilter | string
  }

  export type BerkasWhereInput = {
    AND?: Enumerable<BerkasWhereInput>
    OR?: Enumerable<BerkasWhereInput>
    NOT?: Enumerable<BerkasWhereInput>
    id?: IntFilter | number
    nama?: StringFilter | string
    jenis_berkas?: EnumJenisBerkasFilter | JenisBerkas
    BerkasUploaded?: BerkasUploadedListRelationFilter
  }

  export type BerkasOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    jenis_berkas?: SortOrder
    BerkasUploaded?: BerkasUploadedOrderByRelationAggregateInput
  }

  export type BerkasWhereUniqueInput = {
    id?: number
  }

  export type BerkasOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    jenis_berkas?: SortOrder
    _count?: BerkasCountOrderByAggregateInput
    _avg?: BerkasAvgOrderByAggregateInput
    _max?: BerkasMaxOrderByAggregateInput
    _min?: BerkasMinOrderByAggregateInput
    _sum?: BerkasSumOrderByAggregateInput
  }

  export type BerkasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BerkasScalarWhereWithAggregatesInput>
    OR?: Enumerable<BerkasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BerkasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nama?: StringWithAggregatesFilter | string
    jenis_berkas?: EnumJenisBerkasWithAggregatesFilter | JenisBerkas
  }

  export type BerkasAdminWhereInput = {
    AND?: Enumerable<BerkasAdminWhereInput>
    OR?: Enumerable<BerkasAdminWhereInput>
    NOT?: Enumerable<BerkasAdminWhereInput>
    id?: StringFilter | string
    nim?: StringFilter | string
    password?: StringFilter | string
  }

  export type BerkasAdminOrderByWithRelationInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
  }

  export type BerkasAdminWhereUniqueInput = {
    id?: string
  }

  export type BerkasAdminOrderByWithAggregationInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
    _count?: BerkasAdminCountOrderByAggregateInput
    _max?: BerkasAdminMaxOrderByAggregateInput
    _min?: BerkasAdminMinOrderByAggregateInput
  }

  export type BerkasAdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BerkasAdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<BerkasAdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BerkasAdminScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nim?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateCreateNestedOneWithoutAccountInput
    Challenge?: ChallengeCreateNestedManyWithoutSenderInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutSenderInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateUncheckedCreateNestedOneWithoutAccountInput
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutSenderInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutSenderInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUpdateOneWithoutAccountInput
    Challenge?: ChallengeUpdateManyWithoutSenderInput
    Pelanggaran?: PelanggaranUpdateManyWithoutSenderInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUncheckedUpdateOneWithoutAccountInput
    Challenge?: ChallengeUncheckedUpdateManyWithoutSenderInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutSenderInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type UserCreateManyInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type CandidateCreateInput = {
    id?: string
    account: UserCreateNestedOneWithoutCandidateInput
    Challenge?: ChallengeCreateNestedManyWithoutCandidateInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutCandidateInput
    Vote?: VoteCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    id?: string
    account_id: string
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutCandidateInput
    Vote?: VoteUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    account?: UserUpdateOneRequiredWithoutCandidateInput
    Challenge?: ChallengeUpdateManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUpdateManyWithoutCandidateInput
    Vote?: VoteUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    Challenge?: ChallengeUncheckedUpdateManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutCandidateInput
    Vote?: VoteUncheckedUpdateManyWithoutCandidateInput
  }

  export type CandidateCreateManyInput = {
    id?: string
    account_id: string
  }

  export type CandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
  }

  export type ChallengeCreateInput = {
    id?: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutChallengeInput
    candidate: CandidateCreateNestedOneWithoutChallengeInput
    challenge_answer?: ChallengeAnswerCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateInput = {
    id?: string
    sender_id: string
    candidate_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    challenge_answer?: ChallengeAnswerUncheckedCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutChallengeInput
    candidate?: CandidateUpdateOneRequiredWithoutChallengeInput
    challenge_answer?: ChallengeAnswerUpdateOneWithoutChallengeInput
  }

  export type ChallengeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    challenge_answer?: ChallengeAnswerUncheckedUpdateOneWithoutChallengeInput
  }

  export type ChallengeCreateManyInput = {
    id?: string
    sender_id: string
    candidate_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
  }

  export type ChallengeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeAnswerCreateInput = {
    id?: string
    answer: string
    created_at?: Date | string
    challenge: ChallengeCreateNestedOneWithoutChallenge_answerInput
  }

  export type ChallengeAnswerUncheckedCreateInput = {
    id?: string
    challenge_id: string
    answer: string
    created_at?: Date | string
  }

  export type ChallengeAnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    challenge?: ChallengeUpdateOneRequiredWithoutChallenge_answerInput
  }

  export type ChallengeAnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge_id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeAnswerCreateManyInput = {
    id?: string
    challenge_id: string
    answer: string
    created_at?: Date | string
  }

  export type ChallengeAnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeAnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge_id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PelanggaranCreateInput = {
    id?: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutPelanggaranInput
    candidate: CandidateCreateNestedOneWithoutPelanggaranInput
  }

  export type PelanggaranUncheckedCreateInput = {
    id?: string
    sender_id: string
    candidate_id: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
  }

  export type PelanggaranUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutPelanggaranInput
    candidate?: CandidateUpdateOneRequiredWithoutPelanggaranInput
  }

  export type PelanggaranUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PelanggaranCreateManyInput = {
    id?: string
    sender_id: string
    candidate_id: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
  }

  export type PelanggaranUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PelanggaranUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateInput = {
    id?: string
    created_at?: Date | string
    voter: UserCreateNestedOneWithoutVoteInput
    candidate: CandidateCreateNestedOneWithoutVoteInput
  }

  export type VoteUncheckedCreateInput = {
    id?: string
    voter_id: string
    candidate_id: string
    created_at?: Date | string
  }

  export type VoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter?: UserUpdateOneRequiredWithoutVoteInput
    candidate?: CandidateUpdateOneRequiredWithoutVoteInput
  }

  export type VoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    voter_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyInput = {
    id?: string
    voter_id: string
    candidate_id: string
    created_at?: Date | string
  }

  export type VoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    voter_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BerkasCandidateCreateInput = {
    id?: string
    nim: string
    password: string
    progress?: ProgressBerkas
    BerkasUploaded?: BerkasUploadedCreateNestedManyWithoutBerkas_candidateInput
  }

  export type BerkasCandidateUncheckedCreateInput = {
    id?: string
    nim: string
    password: string
    progress?: ProgressBerkas
    BerkasUploaded?: BerkasUploadedUncheckedCreateNestedManyWithoutBerkas_candidateInput
  }

  export type BerkasCandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressBerkasFieldUpdateOperationsInput | ProgressBerkas
    BerkasUploaded?: BerkasUploadedUpdateManyWithoutBerkas_candidateInput
  }

  export type BerkasCandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressBerkasFieldUpdateOperationsInput | ProgressBerkas
    BerkasUploaded?: BerkasUploadedUncheckedUpdateManyWithoutBerkas_candidateInput
  }

  export type BerkasCandidateCreateManyInput = {
    id?: string
    nim: string
    password: string
    progress?: ProgressBerkas
  }

  export type BerkasCandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressBerkasFieldUpdateOperationsInput | ProgressBerkas
  }

  export type BerkasCandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressBerkasFieldUpdateOperationsInput | ProgressBerkas
  }

  export type BerkasUploadedCreateInput = {
    id?: string
    file_url: string
    berkas: BerkasCreateNestedOneWithoutBerkasUploadedInput
    berkas_candidate: BerkasCandidateCreateNestedOneWithoutBerkasUploadedInput
  }

  export type BerkasUploadedUncheckedCreateInput = {
    id?: string
    berkas_id: number
    berkas_candidate_id: string
    file_url: string
  }

  export type BerkasUploadedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    berkas?: BerkasUpdateOneRequiredWithoutBerkasUploadedInput
    berkas_candidate?: BerkasCandidateUpdateOneRequiredWithoutBerkasUploadedInput
  }

  export type BerkasUploadedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    berkas_id?: IntFieldUpdateOperationsInput | number
    berkas_candidate_id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasUploadedCreateManyInput = {
    id?: string
    berkas_id: number
    berkas_candidate_id: string
    file_url: string
  }

  export type BerkasUploadedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasUploadedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    berkas_id?: IntFieldUpdateOperationsInput | number
    berkas_candidate_id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasCreateInput = {
    nama: string
    jenis_berkas?: JenisBerkas
    BerkasUploaded?: BerkasUploadedCreateNestedManyWithoutBerkasInput
  }

  export type BerkasUncheckedCreateInput = {
    id?: number
    nama: string
    jenis_berkas?: JenisBerkas
    BerkasUploaded?: BerkasUploadedUncheckedCreateNestedManyWithoutBerkasInput
  }

  export type BerkasUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    jenis_berkas?: EnumJenisBerkasFieldUpdateOperationsInput | JenisBerkas
    BerkasUploaded?: BerkasUploadedUpdateManyWithoutBerkasInput
  }

  export type BerkasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jenis_berkas?: EnumJenisBerkasFieldUpdateOperationsInput | JenisBerkas
    BerkasUploaded?: BerkasUploadedUncheckedUpdateManyWithoutBerkasInput
  }

  export type BerkasCreateManyInput = {
    id?: number
    nama: string
    jenis_berkas?: JenisBerkas
  }

  export type BerkasUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    jenis_berkas?: EnumJenisBerkasFieldUpdateOperationsInput | JenisBerkas
  }

  export type BerkasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jenis_berkas?: EnumJenisBerkasFieldUpdateOperationsInput | JenisBerkas
  }

  export type BerkasAdminCreateInput = {
    id?: string
    nim: string
    password: string
  }

  export type BerkasAdminUncheckedCreateInput = {
    id?: string
    nim: string
    password: string
  }

  export type BerkasAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasAdminCreateManyInput = {
    id?: string
    nim: string
    password: string
  }

  export type BerkasAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type CandidateRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type ChallengeListRelationFilter = {
    every?: ChallengeWhereInput
    some?: ChallengeWhereInput
    none?: ChallengeWhereInput
  }

  export type PelanggaranListRelationFilter = {
    every?: PelanggaranWhereInput
    some?: PelanggaranWhereInput
    none?: PelanggaranWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type ChallengeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PelanggaranOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    email_itb?: SortOrder
    email_non_itb?: SortOrder
    long_name?: SortOrder
    short_name?: SortOrder
    fakultas?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    email_itb?: SortOrder
    email_non_itb?: SortOrder
    long_name?: SortOrder
    short_name?: SortOrder
    fakultas?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    email_itb?: SortOrder
    email_non_itb?: SortOrder
    long_name?: SortOrder
    short_name?: SortOrder
    fakultas?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }

  export type EnumProgressFilter = {
    equals?: Progress
    in?: Enumerable<Progress>
    notIn?: Enumerable<Progress>
    not?: NestedEnumProgressFilter | Progress
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ChallengeAnswerRelationFilter = {
    is?: ChallengeAnswerWhereInput | null
    isNot?: ChallengeAnswerWhereInput | null
  }

  export type ChallengeCountOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    payload?: SortOrder
    progress?: SortOrder
    created_at?: SortOrder
  }

  export type ChallengeMaxOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    payload?: SortOrder
    progress?: SortOrder
    created_at?: SortOrder
  }

  export type ChallengeMinOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    payload?: SortOrder
    progress?: SortOrder
    created_at?: SortOrder
  }

  export type EnumProgressWithAggregatesFilter = {
    equals?: Progress
    in?: Enumerable<Progress>
    notIn?: Enumerable<Progress>
    not?: NestedEnumProgressWithAggregatesFilter | Progress
    _count?: NestedIntFilter
    _min?: NestedEnumProgressFilter
    _max?: NestedEnumProgressFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ChallengeRelationFilter = {
    is?: ChallengeWhereInput
    isNot?: ChallengeWhereInput
  }

  export type ChallengeAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    challenge_id?: SortOrder
    answer?: SortOrder
    created_at?: SortOrder
  }

  export type ChallengeAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    challenge_id?: SortOrder
    answer?: SortOrder
    created_at?: SortOrder
  }

  export type ChallengeAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    challenge_id?: SortOrder
    answer?: SortOrder
    created_at?: SortOrder
  }

  export type PelanggaranCountOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    keterangan?: SortOrder
    bukti_url?: SortOrder
    created_at?: SortOrder
  }

  export type PelanggaranMaxOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    keterangan?: SortOrder
    bukti_url?: SortOrder
    created_at?: SortOrder
  }

  export type PelanggaranMinOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    candidate_id?: SortOrder
    keterangan?: SortOrder
    bukti_url?: SortOrder
    created_at?: SortOrder
  }

  export type VoteCountOrderByAggregateInput = {
    id?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
    created_at?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    id?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
    created_at?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    id?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
    created_at?: SortOrder
  }

  export type EnumProgressBerkasFilter = {
    equals?: ProgressBerkas
    in?: Enumerable<ProgressBerkas>
    notIn?: Enumerable<ProgressBerkas>
    not?: NestedEnumProgressBerkasFilter | ProgressBerkas
  }

  export type BerkasUploadedListRelationFilter = {
    every?: BerkasUploadedWhereInput
    some?: BerkasUploadedWhereInput
    none?: BerkasUploadedWhereInput
  }

  export type BerkasUploadedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BerkasCandidateCountOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
    progress?: SortOrder
  }

  export type BerkasCandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
    progress?: SortOrder
  }

  export type BerkasCandidateMinOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
    progress?: SortOrder
  }

  export type EnumProgressBerkasWithAggregatesFilter = {
    equals?: ProgressBerkas
    in?: Enumerable<ProgressBerkas>
    notIn?: Enumerable<ProgressBerkas>
    not?: NestedEnumProgressBerkasWithAggregatesFilter | ProgressBerkas
    _count?: NestedIntFilter
    _min?: NestedEnumProgressBerkasFilter
    _max?: NestedEnumProgressBerkasFilter
  }

  export type BerkasRelationFilter = {
    is?: BerkasWhereInput
    isNot?: BerkasWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BerkasCandidateRelationFilter = {
    is?: BerkasCandidateWhereInput
    isNot?: BerkasCandidateWhereInput
  }

  export type BerkasUploadedCountOrderByAggregateInput = {
    id?: SortOrder
    berkas_id?: SortOrder
    berkas_candidate_id?: SortOrder
    file_url?: SortOrder
  }

  export type BerkasUploadedAvgOrderByAggregateInput = {
    berkas_id?: SortOrder
  }

  export type BerkasUploadedMaxOrderByAggregateInput = {
    id?: SortOrder
    berkas_id?: SortOrder
    berkas_candidate_id?: SortOrder
    file_url?: SortOrder
  }

  export type BerkasUploadedMinOrderByAggregateInput = {
    id?: SortOrder
    berkas_id?: SortOrder
    berkas_candidate_id?: SortOrder
    file_url?: SortOrder
  }

  export type BerkasUploadedSumOrderByAggregateInput = {
    berkas_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumJenisBerkasFilter = {
    equals?: JenisBerkas
    in?: Enumerable<JenisBerkas>
    notIn?: Enumerable<JenisBerkas>
    not?: NestedEnumJenisBerkasFilter | JenisBerkas
  }

  export type BerkasCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    jenis_berkas?: SortOrder
  }

  export type BerkasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BerkasMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    jenis_berkas?: SortOrder
  }

  export type BerkasMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    jenis_berkas?: SortOrder
  }

  export type BerkasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumJenisBerkasWithAggregatesFilter = {
    equals?: JenisBerkas
    in?: Enumerable<JenisBerkas>
    notIn?: Enumerable<JenisBerkas>
    not?: NestedEnumJenisBerkasWithAggregatesFilter | JenisBerkas
    _count?: NestedIntFilter
    _min?: NestedEnumJenisBerkasFilter
    _max?: NestedEnumJenisBerkasFilter
  }

  export type BerkasAdminCountOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
  }

  export type BerkasAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
  }

  export type BerkasAdminMinOrderByAggregateInput = {
    id?: SortOrder
    nim?: SortOrder
    password?: SortOrder
  }

  export type CandidateCreateNestedOneWithoutAccountInput = {
    create?: XOR<CandidateCreateWithoutAccountInput, CandidateUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutAccountInput
    connect?: CandidateWhereUniqueInput
  }

  export type ChallengeCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutSenderInput>, Enumerable<ChallengeUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutSenderInput>
    createMany?: ChallengeCreateManySenderInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type PelanggaranCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutSenderInput>, Enumerable<PelanggaranUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutSenderInput>
    createMany?: PelanggaranCreateManySenderInputEnvelope
    connect?: Enumerable<PelanggaranWhereUniqueInput>
  }

  export type VoteCreateNestedManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type CandidateUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<CandidateCreateWithoutAccountInput, CandidateUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutAccountInput
    connect?: CandidateWhereUniqueInput
  }

  export type ChallengeUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutSenderInput>, Enumerable<ChallengeUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutSenderInput>
    createMany?: ChallengeCreateManySenderInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type PelanggaranUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutSenderInput>, Enumerable<PelanggaranUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutSenderInput>
    createMany?: PelanggaranCreateManySenderInputEnvelope
    connect?: Enumerable<PelanggaranWhereUniqueInput>
  }

  export type VoteUncheckedCreateNestedManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type CandidateUpdateOneWithoutAccountInput = {
    create?: XOR<CandidateCreateWithoutAccountInput, CandidateUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutAccountInput
    upsert?: CandidateUpsertWithoutAccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutAccountInput, CandidateUncheckedUpdateWithoutAccountInput>
  }

  export type ChallengeUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutSenderInput>, Enumerable<ChallengeUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: ChallengeCreateManySenderInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type PelanggaranUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutSenderInput>, Enumerable<PelanggaranUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<PelanggaranUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: PelanggaranCreateManySenderInputEnvelope
    set?: Enumerable<PelanggaranWhereUniqueInput>
    disconnect?: Enumerable<PelanggaranWhereUniqueInput>
    delete?: Enumerable<PelanggaranWhereUniqueInput>
    connect?: Enumerable<PelanggaranWhereUniqueInput>
    update?: Enumerable<PelanggaranUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<PelanggaranUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<PelanggaranScalarWhereInput>
  }

  export type VoteUpdateManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutVoterInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutVoterInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type CandidateUncheckedUpdateOneWithoutAccountInput = {
    create?: XOR<CandidateCreateWithoutAccountInput, CandidateUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutAccountInput
    upsert?: CandidateUpsertWithoutAccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutAccountInput, CandidateUncheckedUpdateWithoutAccountInput>
  }

  export type ChallengeUncheckedUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutSenderInput>, Enumerable<ChallengeUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: ChallengeCreateManySenderInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type PelanggaranUncheckedUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutSenderInput>, Enumerable<PelanggaranUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<PelanggaranUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: PelanggaranCreateManySenderInputEnvelope
    set?: Enumerable<PelanggaranWhereUniqueInput>
    disconnect?: Enumerable<PelanggaranWhereUniqueInput>
    delete?: Enumerable<PelanggaranWhereUniqueInput>
    connect?: Enumerable<PelanggaranWhereUniqueInput>
    update?: Enumerable<PelanggaranUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<PelanggaranUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<PelanggaranScalarWhereInput>
  }

  export type VoteUncheckedUpdateManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutVoterInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutVoterInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCandidateInput = {
    create?: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidateInput
    connect?: UserWhereUniqueInput
  }

  export type ChallengeCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCandidateInput>, Enumerable<ChallengeUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCandidateInput>
    createMany?: ChallengeCreateManyCandidateInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type PelanggaranCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutCandidateInput>, Enumerable<PelanggaranUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutCandidateInput>
    createMany?: PelanggaranCreateManyCandidateInputEnvelope
    connect?: Enumerable<PelanggaranWhereUniqueInput>
  }

  export type VoteCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCandidateInput>, Enumerable<VoteUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCandidateInput>
    createMany?: VoteCreateManyCandidateInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type ChallengeUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCandidateInput>, Enumerable<ChallengeUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCandidateInput>
    createMany?: ChallengeCreateManyCandidateInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type PelanggaranUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutCandidateInput>, Enumerable<PelanggaranUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutCandidateInput>
    createMany?: PelanggaranCreateManyCandidateInputEnvelope
    connect?: Enumerable<PelanggaranWhereUniqueInput>
  }

  export type VoteUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCandidateInput>, Enumerable<VoteUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCandidateInput>
    createMany?: VoteCreateManyCandidateInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCandidateInput = {
    create?: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidateInput
    upsert?: UserUpsertWithoutCandidateInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCandidateInput, UserUncheckedUpdateWithoutCandidateInput>
  }

  export type ChallengeUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCandidateInput>, Enumerable<ChallengeUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: ChallengeCreateManyCandidateInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type PelanggaranUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutCandidateInput>, Enumerable<PelanggaranUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<PelanggaranUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: PelanggaranCreateManyCandidateInputEnvelope
    set?: Enumerable<PelanggaranWhereUniqueInput>
    disconnect?: Enumerable<PelanggaranWhereUniqueInput>
    delete?: Enumerable<PelanggaranWhereUniqueInput>
    connect?: Enumerable<PelanggaranWhereUniqueInput>
    update?: Enumerable<PelanggaranUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<PelanggaranUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<PelanggaranScalarWhereInput>
  }

  export type VoteUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCandidateInput>, Enumerable<VoteUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: VoteCreateManyCandidateInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type ChallengeUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCandidateInput>, Enumerable<ChallengeUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: ChallengeCreateManyCandidateInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type PelanggaranUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<PelanggaranCreateWithoutCandidateInput>, Enumerable<PelanggaranUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<PelanggaranCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<PelanggaranUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: PelanggaranCreateManyCandidateInputEnvelope
    set?: Enumerable<PelanggaranWhereUniqueInput>
    disconnect?: Enumerable<PelanggaranWhereUniqueInput>
    delete?: Enumerable<PelanggaranWhereUniqueInput>
    connect?: Enumerable<PelanggaranWhereUniqueInput>
    update?: Enumerable<PelanggaranUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<PelanggaranUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<PelanggaranScalarWhereInput>
  }

  export type VoteUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCandidateInput>, Enumerable<VoteUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: VoteCreateManyCandidateInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutChallengeInput = {
    create?: XOR<UserCreateWithoutChallengeInput, UserUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengeInput
    connect?: UserWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutChallengeInput = {
    create?: XOR<CandidateCreateWithoutChallengeInput, CandidateUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutChallengeInput
    connect?: CandidateWhereUniqueInput
  }

  export type ChallengeAnswerCreateNestedOneWithoutChallengeInput = {
    create?: XOR<ChallengeAnswerCreateWithoutChallengeInput, ChallengeAnswerUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: ChallengeAnswerCreateOrConnectWithoutChallengeInput
    connect?: ChallengeAnswerWhereUniqueInput
  }

  export type ChallengeAnswerUncheckedCreateNestedOneWithoutChallengeInput = {
    create?: XOR<ChallengeAnswerCreateWithoutChallengeInput, ChallengeAnswerUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: ChallengeAnswerCreateOrConnectWithoutChallengeInput
    connect?: ChallengeAnswerWhereUniqueInput
  }

  export type EnumProgressFieldUpdateOperationsInput = {
    set?: Progress
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutChallengeInput = {
    create?: XOR<UserCreateWithoutChallengeInput, UserUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengeInput
    upsert?: UserUpsertWithoutChallengeInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChallengeInput, UserUncheckedUpdateWithoutChallengeInput>
  }

  export type CandidateUpdateOneRequiredWithoutChallengeInput = {
    create?: XOR<CandidateCreateWithoutChallengeInput, CandidateUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutChallengeInput
    upsert?: CandidateUpsertWithoutChallengeInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutChallengeInput, CandidateUncheckedUpdateWithoutChallengeInput>
  }

  export type ChallengeAnswerUpdateOneWithoutChallengeInput = {
    create?: XOR<ChallengeAnswerCreateWithoutChallengeInput, ChallengeAnswerUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: ChallengeAnswerCreateOrConnectWithoutChallengeInput
    upsert?: ChallengeAnswerUpsertWithoutChallengeInput
    disconnect?: boolean
    delete?: boolean
    connect?: ChallengeAnswerWhereUniqueInput
    update?: XOR<ChallengeAnswerUpdateWithoutChallengeInput, ChallengeAnswerUncheckedUpdateWithoutChallengeInput>
  }

  export type ChallengeAnswerUncheckedUpdateOneWithoutChallengeInput = {
    create?: XOR<ChallengeAnswerCreateWithoutChallengeInput, ChallengeAnswerUncheckedCreateWithoutChallengeInput>
    connectOrCreate?: ChallengeAnswerCreateOrConnectWithoutChallengeInput
    upsert?: ChallengeAnswerUpsertWithoutChallengeInput
    disconnect?: boolean
    delete?: boolean
    connect?: ChallengeAnswerWhereUniqueInput
    update?: XOR<ChallengeAnswerUpdateWithoutChallengeInput, ChallengeAnswerUncheckedUpdateWithoutChallengeInput>
  }

  export type ChallengeCreateNestedOneWithoutChallenge_answerInput = {
    create?: XOR<ChallengeCreateWithoutChallenge_answerInput, ChallengeUncheckedCreateWithoutChallenge_answerInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutChallenge_answerInput
    connect?: ChallengeWhereUniqueInput
  }

  export type ChallengeUpdateOneRequiredWithoutChallenge_answerInput = {
    create?: XOR<ChallengeCreateWithoutChallenge_answerInput, ChallengeUncheckedCreateWithoutChallenge_answerInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutChallenge_answerInput
    upsert?: ChallengeUpsertWithoutChallenge_answerInput
    connect?: ChallengeWhereUniqueInput
    update?: XOR<ChallengeUpdateWithoutChallenge_answerInput, ChallengeUncheckedUpdateWithoutChallenge_answerInput>
  }

  export type UserCreateNestedOneWithoutPelanggaranInput = {
    create?: XOR<UserCreateWithoutPelanggaranInput, UserUncheckedCreateWithoutPelanggaranInput>
    connectOrCreate?: UserCreateOrConnectWithoutPelanggaranInput
    connect?: UserWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutPelanggaranInput = {
    create?: XOR<CandidateCreateWithoutPelanggaranInput, CandidateUncheckedCreateWithoutPelanggaranInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutPelanggaranInput
    connect?: CandidateWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPelanggaranInput = {
    create?: XOR<UserCreateWithoutPelanggaranInput, UserUncheckedCreateWithoutPelanggaranInput>
    connectOrCreate?: UserCreateOrConnectWithoutPelanggaranInput
    upsert?: UserUpsertWithoutPelanggaranInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPelanggaranInput, UserUncheckedUpdateWithoutPelanggaranInput>
  }

  export type CandidateUpdateOneRequiredWithoutPelanggaranInput = {
    create?: XOR<CandidateCreateWithoutPelanggaranInput, CandidateUncheckedCreateWithoutPelanggaranInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutPelanggaranInput
    upsert?: CandidateUpsertWithoutPelanggaranInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutPelanggaranInput, CandidateUncheckedUpdateWithoutPelanggaranInput>
  }

  export type UserCreateNestedOneWithoutVoteInput = {
    create?: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutVoteInput
    connect?: UserWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutVoteInput = {
    create?: XOR<CandidateCreateWithoutVoteInput, CandidateUncheckedCreateWithoutVoteInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutVoteInput
    connect?: CandidateWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVoteInput = {
    create?: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutVoteInput
    upsert?: UserUpsertWithoutVoteInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutVoteInput, UserUncheckedUpdateWithoutVoteInput>
  }

  export type CandidateUpdateOneRequiredWithoutVoteInput = {
    create?: XOR<CandidateCreateWithoutVoteInput, CandidateUncheckedCreateWithoutVoteInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutVoteInput
    upsert?: CandidateUpsertWithoutVoteInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutVoteInput, CandidateUncheckedUpdateWithoutVoteInput>
  }

  export type BerkasUploadedCreateNestedManyWithoutBerkas_candidateInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkas_candidateInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkas_candidateInput>
    createMany?: BerkasUploadedCreateManyBerkas_candidateInputEnvelope
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
  }

  export type BerkasUploadedUncheckedCreateNestedManyWithoutBerkas_candidateInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkas_candidateInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkas_candidateInput>
    createMany?: BerkasUploadedCreateManyBerkas_candidateInputEnvelope
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
  }

  export type EnumProgressBerkasFieldUpdateOperationsInput = {
    set?: ProgressBerkas
  }

  export type BerkasUploadedUpdateManyWithoutBerkas_candidateInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkas_candidateInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkas_candidateInput>
    upsert?: Enumerable<BerkasUploadedUpsertWithWhereUniqueWithoutBerkas_candidateInput>
    createMany?: BerkasUploadedCreateManyBerkas_candidateInputEnvelope
    set?: Enumerable<BerkasUploadedWhereUniqueInput>
    disconnect?: Enumerable<BerkasUploadedWhereUniqueInput>
    delete?: Enumerable<BerkasUploadedWhereUniqueInput>
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
    update?: Enumerable<BerkasUploadedUpdateWithWhereUniqueWithoutBerkas_candidateInput>
    updateMany?: Enumerable<BerkasUploadedUpdateManyWithWhereWithoutBerkas_candidateInput>
    deleteMany?: Enumerable<BerkasUploadedScalarWhereInput>
  }

  export type BerkasUploadedUncheckedUpdateManyWithoutBerkas_candidateInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkas_candidateInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkas_candidateInput>
    upsert?: Enumerable<BerkasUploadedUpsertWithWhereUniqueWithoutBerkas_candidateInput>
    createMany?: BerkasUploadedCreateManyBerkas_candidateInputEnvelope
    set?: Enumerable<BerkasUploadedWhereUniqueInput>
    disconnect?: Enumerable<BerkasUploadedWhereUniqueInput>
    delete?: Enumerable<BerkasUploadedWhereUniqueInput>
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
    update?: Enumerable<BerkasUploadedUpdateWithWhereUniqueWithoutBerkas_candidateInput>
    updateMany?: Enumerable<BerkasUploadedUpdateManyWithWhereWithoutBerkas_candidateInput>
    deleteMany?: Enumerable<BerkasUploadedScalarWhereInput>
  }

  export type BerkasCreateNestedOneWithoutBerkasUploadedInput = {
    create?: XOR<BerkasCreateWithoutBerkasUploadedInput, BerkasUncheckedCreateWithoutBerkasUploadedInput>
    connectOrCreate?: BerkasCreateOrConnectWithoutBerkasUploadedInput
    connect?: BerkasWhereUniqueInput
  }

  export type BerkasCandidateCreateNestedOneWithoutBerkasUploadedInput = {
    create?: XOR<BerkasCandidateCreateWithoutBerkasUploadedInput, BerkasCandidateUncheckedCreateWithoutBerkasUploadedInput>
    connectOrCreate?: BerkasCandidateCreateOrConnectWithoutBerkasUploadedInput
    connect?: BerkasCandidateWhereUniqueInput
  }

  export type BerkasUpdateOneRequiredWithoutBerkasUploadedInput = {
    create?: XOR<BerkasCreateWithoutBerkasUploadedInput, BerkasUncheckedCreateWithoutBerkasUploadedInput>
    connectOrCreate?: BerkasCreateOrConnectWithoutBerkasUploadedInput
    upsert?: BerkasUpsertWithoutBerkasUploadedInput
    connect?: BerkasWhereUniqueInput
    update?: XOR<BerkasUpdateWithoutBerkasUploadedInput, BerkasUncheckedUpdateWithoutBerkasUploadedInput>
  }

  export type BerkasCandidateUpdateOneRequiredWithoutBerkasUploadedInput = {
    create?: XOR<BerkasCandidateCreateWithoutBerkasUploadedInput, BerkasCandidateUncheckedCreateWithoutBerkasUploadedInput>
    connectOrCreate?: BerkasCandidateCreateOrConnectWithoutBerkasUploadedInput
    upsert?: BerkasCandidateUpsertWithoutBerkasUploadedInput
    connect?: BerkasCandidateWhereUniqueInput
    update?: XOR<BerkasCandidateUpdateWithoutBerkasUploadedInput, BerkasCandidateUncheckedUpdateWithoutBerkasUploadedInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BerkasUploadedCreateNestedManyWithoutBerkasInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkasInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkasInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkasInput>
    createMany?: BerkasUploadedCreateManyBerkasInputEnvelope
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
  }

  export type BerkasUploadedUncheckedCreateNestedManyWithoutBerkasInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkasInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkasInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkasInput>
    createMany?: BerkasUploadedCreateManyBerkasInputEnvelope
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
  }

  export type EnumJenisBerkasFieldUpdateOperationsInput = {
    set?: JenisBerkas
  }

  export type BerkasUploadedUpdateManyWithoutBerkasInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkasInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkasInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkasInput>
    upsert?: Enumerable<BerkasUploadedUpsertWithWhereUniqueWithoutBerkasInput>
    createMany?: BerkasUploadedCreateManyBerkasInputEnvelope
    set?: Enumerable<BerkasUploadedWhereUniqueInput>
    disconnect?: Enumerable<BerkasUploadedWhereUniqueInput>
    delete?: Enumerable<BerkasUploadedWhereUniqueInput>
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
    update?: Enumerable<BerkasUploadedUpdateWithWhereUniqueWithoutBerkasInput>
    updateMany?: Enumerable<BerkasUploadedUpdateManyWithWhereWithoutBerkasInput>
    deleteMany?: Enumerable<BerkasUploadedScalarWhereInput>
  }

  export type BerkasUploadedUncheckedUpdateManyWithoutBerkasInput = {
    create?: XOR<Enumerable<BerkasUploadedCreateWithoutBerkasInput>, Enumerable<BerkasUploadedUncheckedCreateWithoutBerkasInput>>
    connectOrCreate?: Enumerable<BerkasUploadedCreateOrConnectWithoutBerkasInput>
    upsert?: Enumerable<BerkasUploadedUpsertWithWhereUniqueWithoutBerkasInput>
    createMany?: BerkasUploadedCreateManyBerkasInputEnvelope
    set?: Enumerable<BerkasUploadedWhereUniqueInput>
    disconnect?: Enumerable<BerkasUploadedWhereUniqueInput>
    delete?: Enumerable<BerkasUploadedWhereUniqueInput>
    connect?: Enumerable<BerkasUploadedWhereUniqueInput>
    update?: Enumerable<BerkasUploadedUpdateWithWhereUniqueWithoutBerkasInput>
    updateMany?: Enumerable<BerkasUploadedUpdateManyWithWhereWithoutBerkasInput>
    deleteMany?: Enumerable<BerkasUploadedScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedEnumProgressFilter = {
    equals?: Progress
    in?: Enumerable<Progress>
    notIn?: Enumerable<Progress>
    not?: NestedEnumProgressFilter | Progress
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumProgressWithAggregatesFilter = {
    equals?: Progress
    in?: Enumerable<Progress>
    notIn?: Enumerable<Progress>
    not?: NestedEnumProgressWithAggregatesFilter | Progress
    _count?: NestedIntFilter
    _min?: NestedEnumProgressFilter
    _max?: NestedEnumProgressFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumProgressBerkasFilter = {
    equals?: ProgressBerkas
    in?: Enumerable<ProgressBerkas>
    notIn?: Enumerable<ProgressBerkas>
    not?: NestedEnumProgressBerkasFilter | ProgressBerkas
  }

  export type NestedEnumProgressBerkasWithAggregatesFilter = {
    equals?: ProgressBerkas
    in?: Enumerable<ProgressBerkas>
    notIn?: Enumerable<ProgressBerkas>
    not?: NestedEnumProgressBerkasWithAggregatesFilter | ProgressBerkas
    _count?: NestedIntFilter
    _min?: NestedEnumProgressBerkasFilter
    _max?: NestedEnumProgressBerkasFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumJenisBerkasFilter = {
    equals?: JenisBerkas
    in?: Enumerable<JenisBerkas>
    notIn?: Enumerable<JenisBerkas>
    not?: NestedEnumJenisBerkasFilter | JenisBerkas
  }

  export type NestedEnumJenisBerkasWithAggregatesFilter = {
    equals?: JenisBerkas
    in?: Enumerable<JenisBerkas>
    notIn?: Enumerable<JenisBerkas>
    not?: NestedEnumJenisBerkasWithAggregatesFilter | JenisBerkas
    _count?: NestedIntFilter
    _min?: NestedEnumJenisBerkasFilter
    _max?: NestedEnumJenisBerkasFilter
  }

  export type CandidateCreateWithoutAccountInput = {
    id?: string
    Challenge?: ChallengeCreateNestedManyWithoutCandidateInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutCandidateInput
    Vote?: VoteCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutAccountInput = {
    id?: string
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutCandidateInput
    Vote?: VoteUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutAccountInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutAccountInput, CandidateUncheckedCreateWithoutAccountInput>
  }

  export type ChallengeCreateWithoutSenderInput = {
    id?: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    candidate: CandidateCreateNestedOneWithoutChallengeInput
    challenge_answer?: ChallengeAnswerCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutSenderInput = {
    id?: string
    candidate_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    challenge_answer?: ChallengeAnswerUncheckedCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutSenderInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutSenderInput, ChallengeUncheckedCreateWithoutSenderInput>
  }

  export type ChallengeCreateManySenderInputEnvelope = {
    data: Enumerable<ChallengeCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type PelanggaranCreateWithoutSenderInput = {
    id?: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
    candidate: CandidateCreateNestedOneWithoutPelanggaranInput
  }

  export type PelanggaranUncheckedCreateWithoutSenderInput = {
    id?: string
    candidate_id: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
  }

  export type PelanggaranCreateOrConnectWithoutSenderInput = {
    where: PelanggaranWhereUniqueInput
    create: XOR<PelanggaranCreateWithoutSenderInput, PelanggaranUncheckedCreateWithoutSenderInput>
  }

  export type PelanggaranCreateManySenderInputEnvelope = {
    data: Enumerable<PelanggaranCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutVoterInput = {
    id?: string
    created_at?: Date | string
    candidate: CandidateCreateNestedOneWithoutVoteInput
  }

  export type VoteUncheckedCreateWithoutVoterInput = {
    id?: string
    candidate_id: string
    created_at?: Date | string
  }

  export type VoteCreateOrConnectWithoutVoterInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput>
  }

  export type VoteCreateManyVoterInputEnvelope = {
    data: Enumerable<VoteCreateManyVoterInput>
    skipDuplicates?: boolean
  }

  export type CandidateUpsertWithoutAccountInput = {
    update: XOR<CandidateUpdateWithoutAccountInput, CandidateUncheckedUpdateWithoutAccountInput>
    create: XOR<CandidateCreateWithoutAccountInput, CandidateUncheckedCreateWithoutAccountInput>
  }

  export type CandidateUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    Challenge?: ChallengeUpdateManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUpdateManyWithoutCandidateInput
    Vote?: VoteUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    Challenge?: ChallengeUncheckedUpdateManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutCandidateInput
    Vote?: VoteUncheckedUpdateManyWithoutCandidateInput
  }

  export type ChallengeUpsertWithWhereUniqueWithoutSenderInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutSenderInput, ChallengeUncheckedUpdateWithoutSenderInput>
    create: XOR<ChallengeCreateWithoutSenderInput, ChallengeUncheckedCreateWithoutSenderInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutSenderInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutSenderInput, ChallengeUncheckedUpdateWithoutSenderInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutSenderInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutChallengeInput>
  }

  export type ChallengeScalarWhereInput = {
    AND?: Enumerable<ChallengeScalarWhereInput>
    OR?: Enumerable<ChallengeScalarWhereInput>
    NOT?: Enumerable<ChallengeScalarWhereInput>
    id?: StringFilter | string
    sender_id?: StringFilter | string
    candidate_id?: StringFilter | string
    payload?: StringFilter | string
    progress?: EnumProgressFilter | Progress
    created_at?: DateTimeFilter | Date | string
  }

  export type PelanggaranUpsertWithWhereUniqueWithoutSenderInput = {
    where: PelanggaranWhereUniqueInput
    update: XOR<PelanggaranUpdateWithoutSenderInput, PelanggaranUncheckedUpdateWithoutSenderInput>
    create: XOR<PelanggaranCreateWithoutSenderInput, PelanggaranUncheckedCreateWithoutSenderInput>
  }

  export type PelanggaranUpdateWithWhereUniqueWithoutSenderInput = {
    where: PelanggaranWhereUniqueInput
    data: XOR<PelanggaranUpdateWithoutSenderInput, PelanggaranUncheckedUpdateWithoutSenderInput>
  }

  export type PelanggaranUpdateManyWithWhereWithoutSenderInput = {
    where: PelanggaranScalarWhereInput
    data: XOR<PelanggaranUpdateManyMutationInput, PelanggaranUncheckedUpdateManyWithoutPelanggaranInput>
  }

  export type PelanggaranScalarWhereInput = {
    AND?: Enumerable<PelanggaranScalarWhereInput>
    OR?: Enumerable<PelanggaranScalarWhereInput>
    NOT?: Enumerable<PelanggaranScalarWhereInput>
    id?: StringFilter | string
    sender_id?: StringFilter | string
    candidate_id?: StringFilter | string
    keterangan?: StringFilter | string
    bukti_url?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type VoteUpsertWithWhereUniqueWithoutVoterInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutVoterInput, VoteUncheckedUpdateWithoutVoterInput>
    create: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutVoterInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutVoterInput, VoteUncheckedUpdateWithoutVoterInput>
  }

  export type VoteUpdateManyWithWhereWithoutVoterInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoteInput>
  }

  export type VoteScalarWhereInput = {
    AND?: Enumerable<VoteScalarWhereInput>
    OR?: Enumerable<VoteScalarWhereInput>
    NOT?: Enumerable<VoteScalarWhereInput>
    id?: StringFilter | string
    voter_id?: StringFilter | string
    candidate_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutCandidateInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    Challenge?: ChallengeCreateNestedManyWithoutSenderInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutSenderInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateWithoutCandidateInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutSenderInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutSenderInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserCreateOrConnectWithoutCandidateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
  }

  export type ChallengeCreateWithoutCandidateInput = {
    id?: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutChallengeInput
    challenge_answer?: ChallengeAnswerCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutCandidateInput = {
    id?: string
    sender_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    challenge_answer?: ChallengeAnswerUncheckedCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutCandidateInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutCandidateInput, ChallengeUncheckedCreateWithoutCandidateInput>
  }

  export type ChallengeCreateManyCandidateInputEnvelope = {
    data: Enumerable<ChallengeCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type PelanggaranCreateWithoutCandidateInput = {
    id?: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutPelanggaranInput
  }

  export type PelanggaranUncheckedCreateWithoutCandidateInput = {
    id?: string
    sender_id: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
  }

  export type PelanggaranCreateOrConnectWithoutCandidateInput = {
    where: PelanggaranWhereUniqueInput
    create: XOR<PelanggaranCreateWithoutCandidateInput, PelanggaranUncheckedCreateWithoutCandidateInput>
  }

  export type PelanggaranCreateManyCandidateInputEnvelope = {
    data: Enumerable<PelanggaranCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutCandidateInput = {
    id?: string
    created_at?: Date | string
    voter: UserCreateNestedOneWithoutVoteInput
  }

  export type VoteUncheckedCreateWithoutCandidateInput = {
    id?: string
    voter_id: string
    created_at?: Date | string
  }

  export type VoteCreateOrConnectWithoutCandidateInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput>
  }

  export type VoteCreateManyCandidateInputEnvelope = {
    data: Enumerable<VoteCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCandidateInput = {
    update: XOR<UserUpdateWithoutCandidateInput, UserUncheckedUpdateWithoutCandidateInput>
    create: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
  }

  export type UserUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    Challenge?: ChallengeUpdateManyWithoutSenderInput
    Pelanggaran?: PelanggaranUpdateManyWithoutSenderInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    Challenge?: ChallengeUncheckedUpdateManyWithoutSenderInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutSenderInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type ChallengeUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutCandidateInput, ChallengeUncheckedUpdateWithoutCandidateInput>
    create: XOR<ChallengeCreateWithoutCandidateInput, ChallengeUncheckedCreateWithoutCandidateInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutCandidateInput, ChallengeUncheckedUpdateWithoutCandidateInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutCandidateInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutChallengeInput>
  }

  export type PelanggaranUpsertWithWhereUniqueWithoutCandidateInput = {
    where: PelanggaranWhereUniqueInput
    update: XOR<PelanggaranUpdateWithoutCandidateInput, PelanggaranUncheckedUpdateWithoutCandidateInput>
    create: XOR<PelanggaranCreateWithoutCandidateInput, PelanggaranUncheckedCreateWithoutCandidateInput>
  }

  export type PelanggaranUpdateWithWhereUniqueWithoutCandidateInput = {
    where: PelanggaranWhereUniqueInput
    data: XOR<PelanggaranUpdateWithoutCandidateInput, PelanggaranUncheckedUpdateWithoutCandidateInput>
  }

  export type PelanggaranUpdateManyWithWhereWithoutCandidateInput = {
    where: PelanggaranScalarWhereInput
    data: XOR<PelanggaranUpdateManyMutationInput, PelanggaranUncheckedUpdateManyWithoutPelanggaranInput>
  }

  export type VoteUpsertWithWhereUniqueWithoutCandidateInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutCandidateInput, VoteUncheckedUpdateWithoutCandidateInput>
    create: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutCandidateInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutCandidateInput, VoteUncheckedUpdateWithoutCandidateInput>
  }

  export type VoteUpdateManyWithWhereWithoutCandidateInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoteInput>
  }

  export type UserCreateWithoutChallengeInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateCreateNestedOneWithoutAccountInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutSenderInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateWithoutChallengeInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateUncheckedCreateNestedOneWithoutAccountInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutSenderInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserCreateOrConnectWithoutChallengeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChallengeInput, UserUncheckedCreateWithoutChallengeInput>
  }

  export type CandidateCreateWithoutChallengeInput = {
    id?: string
    account: UserCreateNestedOneWithoutCandidateInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutCandidateInput
    Vote?: VoteCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutChallengeInput = {
    id?: string
    account_id: string
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutCandidateInput
    Vote?: VoteUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutChallengeInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutChallengeInput, CandidateUncheckedCreateWithoutChallengeInput>
  }

  export type ChallengeAnswerCreateWithoutChallengeInput = {
    id?: string
    answer: string
    created_at?: Date | string
  }

  export type ChallengeAnswerUncheckedCreateWithoutChallengeInput = {
    id?: string
    answer: string
    created_at?: Date | string
  }

  export type ChallengeAnswerCreateOrConnectWithoutChallengeInput = {
    where: ChallengeAnswerWhereUniqueInput
    create: XOR<ChallengeAnswerCreateWithoutChallengeInput, ChallengeAnswerUncheckedCreateWithoutChallengeInput>
  }

  export type UserUpsertWithoutChallengeInput = {
    update: XOR<UserUpdateWithoutChallengeInput, UserUncheckedUpdateWithoutChallengeInput>
    create: XOR<UserCreateWithoutChallengeInput, UserUncheckedCreateWithoutChallengeInput>
  }

  export type UserUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUpdateOneWithoutAccountInput
    Pelanggaran?: PelanggaranUpdateManyWithoutSenderInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUncheckedUpdateOneWithoutAccountInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutSenderInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type CandidateUpsertWithoutChallengeInput = {
    update: XOR<CandidateUpdateWithoutChallengeInput, CandidateUncheckedUpdateWithoutChallengeInput>
    create: XOR<CandidateCreateWithoutChallengeInput, CandidateUncheckedCreateWithoutChallengeInput>
  }

  export type CandidateUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    account?: UserUpdateOneRequiredWithoutCandidateInput
    Pelanggaran?: PelanggaranUpdateManyWithoutCandidateInput
    Vote?: VoteUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutCandidateInput
    Vote?: VoteUncheckedUpdateManyWithoutCandidateInput
  }

  export type ChallengeAnswerUpsertWithoutChallengeInput = {
    update: XOR<ChallengeAnswerUpdateWithoutChallengeInput, ChallengeAnswerUncheckedUpdateWithoutChallengeInput>
    create: XOR<ChallengeAnswerCreateWithoutChallengeInput, ChallengeAnswerUncheckedCreateWithoutChallengeInput>
  }

  export type ChallengeAnswerUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeAnswerUncheckedUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCreateWithoutChallenge_answerInput = {
    id?: string
    payload: string
    progress?: Progress
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutChallengeInput
    candidate: CandidateCreateNestedOneWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutChallenge_answerInput = {
    id?: string
    sender_id: string
    candidate_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
  }

  export type ChallengeCreateOrConnectWithoutChallenge_answerInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutChallenge_answerInput, ChallengeUncheckedCreateWithoutChallenge_answerInput>
  }

  export type ChallengeUpsertWithoutChallenge_answerInput = {
    update: XOR<ChallengeUpdateWithoutChallenge_answerInput, ChallengeUncheckedUpdateWithoutChallenge_answerInput>
    create: XOR<ChallengeCreateWithoutChallenge_answerInput, ChallengeUncheckedCreateWithoutChallenge_answerInput>
  }

  export type ChallengeUpdateWithoutChallenge_answerInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutChallengeInput
    candidate?: CandidateUpdateOneRequiredWithoutChallengeInput
  }

  export type ChallengeUncheckedUpdateWithoutChallenge_answerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPelanggaranInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateCreateNestedOneWithoutAccountInput
    Challenge?: ChallengeCreateNestedManyWithoutSenderInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateWithoutPelanggaranInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateUncheckedCreateNestedOneWithoutAccountInput
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutSenderInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserCreateOrConnectWithoutPelanggaranInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPelanggaranInput, UserUncheckedCreateWithoutPelanggaranInput>
  }

  export type CandidateCreateWithoutPelanggaranInput = {
    id?: string
    account: UserCreateNestedOneWithoutCandidateInput
    Challenge?: ChallengeCreateNestedManyWithoutCandidateInput
    Vote?: VoteCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutPelanggaranInput = {
    id?: string
    account_id: string
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutCandidateInput
    Vote?: VoteUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutPelanggaranInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutPelanggaranInput, CandidateUncheckedCreateWithoutPelanggaranInput>
  }

  export type UserUpsertWithoutPelanggaranInput = {
    update: XOR<UserUpdateWithoutPelanggaranInput, UserUncheckedUpdateWithoutPelanggaranInput>
    create: XOR<UserCreateWithoutPelanggaranInput, UserUncheckedCreateWithoutPelanggaranInput>
  }

  export type UserUpdateWithoutPelanggaranInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUpdateOneWithoutAccountInput
    Challenge?: ChallengeUpdateManyWithoutSenderInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateWithoutPelanggaranInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUncheckedUpdateOneWithoutAccountInput
    Challenge?: ChallengeUncheckedUpdateManyWithoutSenderInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type CandidateUpsertWithoutPelanggaranInput = {
    update: XOR<CandidateUpdateWithoutPelanggaranInput, CandidateUncheckedUpdateWithoutPelanggaranInput>
    create: XOR<CandidateCreateWithoutPelanggaranInput, CandidateUncheckedCreateWithoutPelanggaranInput>
  }

  export type CandidateUpdateWithoutPelanggaranInput = {
    id?: StringFieldUpdateOperationsInput | string
    account?: UserUpdateOneRequiredWithoutCandidateInput
    Challenge?: ChallengeUpdateManyWithoutCandidateInput
    Vote?: VoteUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutPelanggaranInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    Challenge?: ChallengeUncheckedUpdateManyWithoutCandidateInput
    Vote?: VoteUncheckedUpdateManyWithoutCandidateInput
  }

  export type UserCreateWithoutVoteInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateCreateNestedOneWithoutAccountInput
    Challenge?: ChallengeCreateNestedManyWithoutSenderInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutVoteInput = {
    id?: string
    nim: string
    email_itb: string
    email_non_itb: string
    long_name: string
    short_name: string
    fakultas: string
    role?: Role
    candidate?: CandidateUncheckedCreateNestedOneWithoutAccountInput
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutSenderInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutVoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
  }

  export type CandidateCreateWithoutVoteInput = {
    id?: string
    account: UserCreateNestedOneWithoutCandidateInput
    Challenge?: ChallengeCreateNestedManyWithoutCandidateInput
    Pelanggaran?: PelanggaranCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutVoteInput = {
    id?: string
    account_id: string
    Challenge?: ChallengeUncheckedCreateNestedManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutVoteInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutVoteInput, CandidateUncheckedCreateWithoutVoteInput>
  }

  export type UserUpsertWithoutVoteInput = {
    update: XOR<UserUpdateWithoutVoteInput, UserUncheckedUpdateWithoutVoteInput>
    create: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
  }

  export type UserUpdateWithoutVoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUpdateOneWithoutAccountInput
    Challenge?: ChallengeUpdateManyWithoutSenderInput
    Pelanggaran?: PelanggaranUpdateManyWithoutSenderInput
  }

  export type UserUncheckedUpdateWithoutVoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_itb?: StringFieldUpdateOperationsInput | string
    email_non_itb?: StringFieldUpdateOperationsInput | string
    long_name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    fakultas?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    candidate?: CandidateUncheckedUpdateOneWithoutAccountInput
    Challenge?: ChallengeUncheckedUpdateManyWithoutSenderInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutSenderInput
  }

  export type CandidateUpsertWithoutVoteInput = {
    update: XOR<CandidateUpdateWithoutVoteInput, CandidateUncheckedUpdateWithoutVoteInput>
    create: XOR<CandidateCreateWithoutVoteInput, CandidateUncheckedCreateWithoutVoteInput>
  }

  export type CandidateUpdateWithoutVoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    account?: UserUpdateOneRequiredWithoutCandidateInput
    Challenge?: ChallengeUpdateManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutVoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    Challenge?: ChallengeUncheckedUpdateManyWithoutCandidateInput
    Pelanggaran?: PelanggaranUncheckedUpdateManyWithoutCandidateInput
  }

  export type BerkasUploadedCreateWithoutBerkas_candidateInput = {
    id?: string
    file_url: string
    berkas: BerkasCreateNestedOneWithoutBerkasUploadedInput
  }

  export type BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput = {
    id?: string
    berkas_id: number
    file_url: string
  }

  export type BerkasUploadedCreateOrConnectWithoutBerkas_candidateInput = {
    where: BerkasUploadedWhereUniqueInput
    create: XOR<BerkasUploadedCreateWithoutBerkas_candidateInput, BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput>
  }

  export type BerkasUploadedCreateManyBerkas_candidateInputEnvelope = {
    data: Enumerable<BerkasUploadedCreateManyBerkas_candidateInput>
    skipDuplicates?: boolean
  }

  export type BerkasUploadedUpsertWithWhereUniqueWithoutBerkas_candidateInput = {
    where: BerkasUploadedWhereUniqueInput
    update: XOR<BerkasUploadedUpdateWithoutBerkas_candidateInput, BerkasUploadedUncheckedUpdateWithoutBerkas_candidateInput>
    create: XOR<BerkasUploadedCreateWithoutBerkas_candidateInput, BerkasUploadedUncheckedCreateWithoutBerkas_candidateInput>
  }

  export type BerkasUploadedUpdateWithWhereUniqueWithoutBerkas_candidateInput = {
    where: BerkasUploadedWhereUniqueInput
    data: XOR<BerkasUploadedUpdateWithoutBerkas_candidateInput, BerkasUploadedUncheckedUpdateWithoutBerkas_candidateInput>
  }

  export type BerkasUploadedUpdateManyWithWhereWithoutBerkas_candidateInput = {
    where: BerkasUploadedScalarWhereInput
    data: XOR<BerkasUploadedUpdateManyMutationInput, BerkasUploadedUncheckedUpdateManyWithoutBerkasUploadedInput>
  }

  export type BerkasUploadedScalarWhereInput = {
    AND?: Enumerable<BerkasUploadedScalarWhereInput>
    OR?: Enumerable<BerkasUploadedScalarWhereInput>
    NOT?: Enumerable<BerkasUploadedScalarWhereInput>
    id?: StringFilter | string
    berkas_id?: IntFilter | number
    berkas_candidate_id?: StringFilter | string
    file_url?: StringFilter | string
  }

  export type BerkasCreateWithoutBerkasUploadedInput = {
    nama: string
    jenis_berkas?: JenisBerkas
  }

  export type BerkasUncheckedCreateWithoutBerkasUploadedInput = {
    id?: number
    nama: string
    jenis_berkas?: JenisBerkas
  }

  export type BerkasCreateOrConnectWithoutBerkasUploadedInput = {
    where: BerkasWhereUniqueInput
    create: XOR<BerkasCreateWithoutBerkasUploadedInput, BerkasUncheckedCreateWithoutBerkasUploadedInput>
  }

  export type BerkasCandidateCreateWithoutBerkasUploadedInput = {
    id?: string
    nim: string
    password: string
    progress?: ProgressBerkas
  }

  export type BerkasCandidateUncheckedCreateWithoutBerkasUploadedInput = {
    id?: string
    nim: string
    password: string
    progress?: ProgressBerkas
  }

  export type BerkasCandidateCreateOrConnectWithoutBerkasUploadedInput = {
    where: BerkasCandidateWhereUniqueInput
    create: XOR<BerkasCandidateCreateWithoutBerkasUploadedInput, BerkasCandidateUncheckedCreateWithoutBerkasUploadedInput>
  }

  export type BerkasUpsertWithoutBerkasUploadedInput = {
    update: XOR<BerkasUpdateWithoutBerkasUploadedInput, BerkasUncheckedUpdateWithoutBerkasUploadedInput>
    create: XOR<BerkasCreateWithoutBerkasUploadedInput, BerkasUncheckedCreateWithoutBerkasUploadedInput>
  }

  export type BerkasUpdateWithoutBerkasUploadedInput = {
    nama?: StringFieldUpdateOperationsInput | string
    jenis_berkas?: EnumJenisBerkasFieldUpdateOperationsInput | JenisBerkas
  }

  export type BerkasUncheckedUpdateWithoutBerkasUploadedInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jenis_berkas?: EnumJenisBerkasFieldUpdateOperationsInput | JenisBerkas
  }

  export type BerkasCandidateUpsertWithoutBerkasUploadedInput = {
    update: XOR<BerkasCandidateUpdateWithoutBerkasUploadedInput, BerkasCandidateUncheckedUpdateWithoutBerkasUploadedInput>
    create: XOR<BerkasCandidateCreateWithoutBerkasUploadedInput, BerkasCandidateUncheckedCreateWithoutBerkasUploadedInput>
  }

  export type BerkasCandidateUpdateWithoutBerkasUploadedInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressBerkasFieldUpdateOperationsInput | ProgressBerkas
  }

  export type BerkasCandidateUncheckedUpdateWithoutBerkasUploadedInput = {
    id?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressBerkasFieldUpdateOperationsInput | ProgressBerkas
  }

  export type BerkasUploadedCreateWithoutBerkasInput = {
    id?: string
    file_url: string
    berkas_candidate: BerkasCandidateCreateNestedOneWithoutBerkasUploadedInput
  }

  export type BerkasUploadedUncheckedCreateWithoutBerkasInput = {
    id?: string
    berkas_candidate_id: string
    file_url: string
  }

  export type BerkasUploadedCreateOrConnectWithoutBerkasInput = {
    where: BerkasUploadedWhereUniqueInput
    create: XOR<BerkasUploadedCreateWithoutBerkasInput, BerkasUploadedUncheckedCreateWithoutBerkasInput>
  }

  export type BerkasUploadedCreateManyBerkasInputEnvelope = {
    data: Enumerable<BerkasUploadedCreateManyBerkasInput>
    skipDuplicates?: boolean
  }

  export type BerkasUploadedUpsertWithWhereUniqueWithoutBerkasInput = {
    where: BerkasUploadedWhereUniqueInput
    update: XOR<BerkasUploadedUpdateWithoutBerkasInput, BerkasUploadedUncheckedUpdateWithoutBerkasInput>
    create: XOR<BerkasUploadedCreateWithoutBerkasInput, BerkasUploadedUncheckedCreateWithoutBerkasInput>
  }

  export type BerkasUploadedUpdateWithWhereUniqueWithoutBerkasInput = {
    where: BerkasUploadedWhereUniqueInput
    data: XOR<BerkasUploadedUpdateWithoutBerkasInput, BerkasUploadedUncheckedUpdateWithoutBerkasInput>
  }

  export type BerkasUploadedUpdateManyWithWhereWithoutBerkasInput = {
    where: BerkasUploadedScalarWhereInput
    data: XOR<BerkasUploadedUpdateManyMutationInput, BerkasUploadedUncheckedUpdateManyWithoutBerkasUploadedInput>
  }

  export type ChallengeCreateManySenderInput = {
    id?: string
    candidate_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
  }

  export type PelanggaranCreateManySenderInput = {
    id?: string
    candidate_id: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
  }

  export type VoteCreateManyVoterInput = {
    id?: string
    candidate_id: string
    created_at?: Date | string
  }

  export type ChallengeUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutChallengeInput
    challenge_answer?: ChallengeAnswerUpdateOneWithoutChallengeInput
  }

  export type ChallengeUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    challenge_answer?: ChallengeAnswerUncheckedUpdateOneWithoutChallengeInput
  }

  export type ChallengeUncheckedUpdateManyWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PelanggaranUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutPelanggaranInput
  }

  export type PelanggaranUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PelanggaranUncheckedUpdateManyWithoutPelanggaranInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutVoterInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutVoteInput
  }

  export type VoteUncheckedUpdateWithoutVoterInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutVoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeCreateManyCandidateInput = {
    id?: string
    sender_id: string
    payload: string
    progress?: Progress
    created_at?: Date | string
  }

  export type PelanggaranCreateManyCandidateInput = {
    id?: string
    sender_id: string
    keterangan: string
    bukti_url: string
    created_at?: Date | string
  }

  export type VoteCreateManyCandidateInput = {
    id?: string
    voter_id: string
    created_at?: Date | string
  }

  export type ChallengeUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutChallengeInput
    challenge_answer?: ChallengeAnswerUpdateOneWithoutChallengeInput
  }

  export type ChallengeUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    progress?: EnumProgressFieldUpdateOperationsInput | Progress
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    challenge_answer?: ChallengeAnswerUncheckedUpdateOneWithoutChallengeInput
  }

  export type PelanggaranUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutPelanggaranInput
  }

  export type PelanggaranUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    bukti_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter?: UserUpdateOneRequiredWithoutVoteInput
  }

  export type VoteUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    voter_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BerkasUploadedCreateManyBerkas_candidateInput = {
    id?: string
    berkas_id: number
    file_url: string
  }

  export type BerkasUploadedUpdateWithoutBerkas_candidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    berkas?: BerkasUpdateOneRequiredWithoutBerkasUploadedInput
  }

  export type BerkasUploadedUncheckedUpdateWithoutBerkas_candidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    berkas_id?: IntFieldUpdateOperationsInput | number
    file_url?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasUploadedUncheckedUpdateManyWithoutBerkasUploadedInput = {
    id?: StringFieldUpdateOperationsInput | string
    berkas_id?: IntFieldUpdateOperationsInput | number
    file_url?: StringFieldUpdateOperationsInput | string
  }

  export type BerkasUploadedCreateManyBerkasInput = {
    id?: string
    berkas_candidate_id: string
    file_url: string
  }

  export type BerkasUploadedUpdateWithoutBerkasInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    berkas_candidate?: BerkasCandidateUpdateOneRequiredWithoutBerkasUploadedInput
  }

  export type BerkasUploadedUncheckedUpdateWithoutBerkasInput = {
    id?: StringFieldUpdateOperationsInput | string
    berkas_candidate_id?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}